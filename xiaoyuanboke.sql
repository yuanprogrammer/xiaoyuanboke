/*
 Navicat Premium Data Transfer

 Source Server         : 小袁博客服务器
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : 43.138.223.178:3306
 Source Schema         : xiaoyuanboke

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 07/06/2022 23:33:55
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for xy_article
-- ----------------------------
DROP TABLE IF EXISTS `xy_article`;
CREATE TABLE `xy_article`  (
  `id` bigint(0) NOT NULL COMMENT '文章ID',
  `author_id` bigint(0) NULL DEFAULT 1515623159565447170 COMMENT '作者ID',
  `title` varchar(81) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章标题',
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章封面',
  `digest` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '文章摘要',
  `tags` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章标签',
  `deleted` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '逻辑删除（0->未删除, 1->逻辑删除）',
  `view_count` int(0) NOT NULL COMMENT '文章访问量',
  `gmt_create` datetime(0) NOT NULL COMMENT '文章发布时间',
  `gmt_update` datetime(0) NOT NULL COMMENT '文章修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article
-- ----------------------------
INSERT INTO `xy_article` VALUES (1515281126715850753, 1515623159565447170, '使用SpringBoot一小时快速搭建一个简单后台管理（增删改查）（超详细教程）', 'https://blog-img.yuanprogrammer.com/38c088bc294f4c4bac1701e7a3a6fd72.jpg', '注重版权，转载请注明原作者和原文链接 作者：Yuan-Programmer 相关文章： Hadoop集群的搭建（一）——Liunx系统的网络配置，主机配置，多台虚拟机间的相互连通和远程操作 相关资源： VMware Workstation 16 pro（最', 'Java,SpringBoot', '0', 9, '2022-04-16 18:49:08', '2022-04-19 21:42:54');
INSERT INTO `xy_article` VALUES (1518850191569018882, 1515623159565447170, '多级分类、菜单等的数据库设计（一张表），以及mybatis-plus的多级分类查询（一条SQL语句）', 'https://img-blog.csdnimg.cn/ba674476cd654232ae0596c938e066c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16', '一、前言 我们在项目开发过程，经常会遇到有文章分类分栏，菜单分类，视频分类等多级分类 那么这种多级分类我们在数据中又是如何设计的呢？在mybatis查询过程中又是如何多级查询的呢？ 别着急，今年我们来解决这个需求， 当然，解决的方法有很多，这里我只介绍我自', 'Java,SpringBoot,MyBatisPlus,MySQL', '0', 6, '2022-04-26 15:11:19', '2022-05-17 17:58:56');
INSERT INTO `xy_article` VALUES (1524060274527584257, 1515623159565447170, 'Vue笔记（指令，打包，构建等）持续更新中', '', '清空所有项目所有依赖 第一步 npm install rimraf -g 第二步 rimraf node_modules node_modules下的就全部删除了', 'Vue', '0', 24, '2022-05-11 00:14:20', '2022-05-17 18:00:49');
INSERT INTO `xy_article` VALUES (1524061897538682881, 1515623159565447170, 'Docker笔记 —— 各软件安装配置笔记（redis、tomcat、nginx、mysql等）持续更新中', '', 'Docker的安装 一、介绍 Docker 安装tomcat Docker 安装java8 Docker 安装mysql8.0 Docker 安装redis Docker 安装nginx', 'Docker笔记', '0', 3, '2022-05-11 00:20:47', '2022-05-17 18:00:30');
INSERT INTO `xy_article` VALUES (1524415450874658817, 1515623159565447170, '正则表达式记录笔记', '', '匹配邮箱 ^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$ 匹配手机号码 ^[1][3,4,5,7,8][0-9]{9}$ 匹配5-20个只能包含数字和字母，且最少1个字母+1个数字 ^(?![0-9]+$)(?!', '正则表达式,笔记', '0', 4, '2022-05-11 23:45:40', '2022-05-12 00:00:23');
INSERT INTO `xy_article` VALUES (1526500138804162562, 1515623159565447170, 'SpringBoot+Vue实现简单用户管理平台第一篇（后端接口设计）', 'https://article.xiaoyuan-boke.com/60726d98513b46b4bb74f9c3667cbc94.png~articleImg', '花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源\n\n## 前言\n#### 开发环境\n开发工具就不多介绍啦，就IDEA做后端，VSCode做前端，用其他的也都可以\n#### 技术\n本次后端用到的技术呢： 主要就两个，SpringBoot + MyBatisPlus\n\n 前端的技术用到的技术： Vue，结合脚手架以及element ui框架开发前端', 'Java,SpringBoot,Vue', '0', 128, '2022-05-17 17:49:29', '2022-05-17 17:49:29');
INSERT INTO `xy_article` VALUES (1526501462320992257, 1515623159565447170, 'SpringBoot+Vue实现简单用户管理平台第二篇（前端设计，接口对接）', 'https://article.xiaoyuan-boke.com/60726d98513b46b4bb74f9c3667cbc94.png', '花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源\n\n脚手架创建项目，安装依赖\n> 提一嘴，VSCode记得要安装Vue环境的插件，这个百度也有很多教程，就不介绍啦，还有就是要有一定Vue基础知识，至少了解vue的语法', '前端,Vue.js,element ui', '0', 25, '2022-05-17 17:54:44', '2022-05-17 17:55:48');
INSERT INTO `xy_article` VALUES (1526505726883713025, 1515623159565447170, '【无标题】', '', '', 'Java', '1', 6, '2022-05-17 18:11:41', '2022-05-17 18:11:41');
INSERT INTO `xy_article` VALUES (1526507240310231042, 1515623159565447170, '测试', '', '', 'dd', '1', 0, '2022-05-17 18:17:42', '2022-05-17 18:17:42');

-- ----------------------------
-- Table structure for xy_article_category
-- ----------------------------
DROP TABLE IF EXISTS `xy_article_category`;
CREATE TABLE `xy_article_category`  (
  `id` bigint(0) NOT NULL COMMENT '主键',
  `article_id` bigint(0) NOT NULL COMMENT '文章编号',
  `category_id` int(0) NOT NULL COMMENT '分类编号',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article_category
-- ----------------------------
INSERT INTO `xy_article_category` VALUES (1515281126757793794, 1515281126715850753, 1);
INSERT INTO `xy_article_category` VALUES (1515281126824902657, 1515281126715850753, 2);
INSERT INTO `xy_article_category` VALUES (1515281126824902658, 1515281126715850753, 12);
INSERT INTO `xy_article_category` VALUES (1524419151165145090, 1524415450874658817, 25);
INSERT INTO `xy_article_category` VALUES (1526500138804162563, 1526500138804162562, 5);
INSERT INTO `xy_article_category` VALUES (1526501728638324738, 1526501462320992257, 5);
INSERT INTO `xy_article_category` VALUES (1526502518727757826, 1518850191569018882, 1);
INSERT INTO `xy_article_category` VALUES (1526502912530960386, 1524061897538682881, 27);
INSERT INTO `xy_article_category` VALUES (1526502991241269249, 1524060274527584257, 26);

-- ----------------------------
-- Table structure for xy_article_collect
-- ----------------------------
DROP TABLE IF EXISTS `xy_article_collect`;
CREATE TABLE `xy_article_collect`  (
  `id` bigint(0) NOT NULL COMMENT '编号',
  `user_id` bigint(0) NOT NULL COMMENT '收藏用户',
  `article_id` bigint(0) NOT NULL COMMENT '收藏的文章',
  `gmt_create` datetime(0) NOT NULL COMMENT '收藏时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article_collect
-- ----------------------------
INSERT INTO `xy_article_collect` VALUES (1526838378588336130, 1526785502436454402, 1515281126715850753, '2022-05-18 16:13:31');
INSERT INTO `xy_article_collect` VALUES (1526840458690490370, 1526785944126025730, 1526500138804162562, '2022-05-18 16:21:47');
INSERT INTO `xy_article_collect` VALUES (1531262041789640705, 153126196324805889, 1526500138804162562, '2022-05-30 21:11:35');

-- ----------------------------
-- Table structure for xy_article_comment
-- ----------------------------
DROP TABLE IF EXISTS `xy_article_comment`;
CREATE TABLE `xy_article_comment`  (
  `id` bigint(0) NOT NULL COMMENT '评论编号',
  `user_id` bigint(0) NOT NULL COMMENT '用户编号',
  `article_id` bigint(0) NOT NULL COMMENT '文章编号',
  `parent_id` bigint(0) NULL DEFAULT NULL COMMENT '父级评论编号',
  `content` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论内容',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '评论时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article_comment
-- ----------------------------
INSERT INTO `xy_article_comment` VALUES (1526837166300262401, 1526785502436454402, 1526500138804162562, NULL, '大佬牛的', '2022-05-18 16:08:42');
INSERT INTO `xy_article_comment` VALUES (1526936085281189889, 1526935057047564290, 1526500138804162562, NULL, '赞赞', '2022-05-18 22:41:46');
INSERT INTO `xy_article_comment` VALUES (1526936605613961218, 1526526039847718913, 1526500138804162562, NULL, '牛啊\n', '2022-05-18 22:43:51');
INSERT INTO `xy_article_comment` VALUES (1526936953489534977, 1526935057047564290, 1526501462320992257, NULL, '赞赞\n', '2022-05-18 22:45:13');
INSERT INTO `xy_article_comment` VALUES (1526937562120794113, 1526937321904615425, 1526500138804162562, NULL, '你好帅啊~', '2022-05-18 22:47:39');
INSERT INTO `xy_article_comment` VALUES (1526937841784401922, 1526935057047564290, 1526501462320992257, NULL, '赞赞\n', '2022-05-18 22:48:45');
INSERT INTO `xy_article_comment` VALUES (1533392874792067074, 1533392228018264321, 1526501462320992257, NULL, '牛逼', '2022-06-05 18:18:45');
INSERT INTO `xy_article_comment` VALUES (1533405313474510849, 1531261963024805889, 1526500138804162562, NULL, '厉害', '2022-06-05 19:08:11');

-- ----------------------------
-- Table structure for xy_article_content
-- ----------------------------
DROP TABLE IF EXISTS `xy_article_content`;
CREATE TABLE `xy_article_content`  (
  `id` bigint(0) NOT NULL COMMENT 'ID',
  `article_id` bigint(0) NOT NULL COMMENT '文章ID',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '文章内容（普通内容文本格式）',
  `content_html` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '文章内容（markdown文本格式）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article_content
-- ----------------------------
INSERT INTO `xy_article_content` VALUES (1515281126824902659, 1515281126715850753, '---\n- 注重版权，转载请注明原作者和原文链接\n- 作者：Yuan-Programmer\n---\n\n\n>**相关文章：**\n>[Hadoop集群的搭建（一）——Liunx系统的网络配置，主机配置，多台虚拟机间的相互连通和远程操作](https://blog.csdn.net/weixin_47971206/article/details/120634576)\n\n>**相关资源：**\n>**VMware Workstation 16 pro（最新版） 安装包百度网盘下载地址**\n链接：https://pan.baidu.com/s/1gI8rhENSl_V9RAmXfK-ClA \n提取码：peu0 <br><br>**激活码可以在百度搜16pro版本的，网上有很多**\n\n\n我们在虚拟机中经常用ssh通过 `主机名` 或者 `ip` 登陆另一台虚拟机进行操作，但是每次登陆都需要输入密码，不方便团队间的合作开发，所以我们可以设置免密登陆，下次登陆其他虚拟机设备时就不需要再输入密码了<br>\n\n我们在上期时候创建了两个虚拟机——**hadoop1**和**hadoop2**，这次继续用这两台虚拟机讲解双向免密登陆\n### 一、免密登陆原理\n假设我们要在**hadoop1**虚拟机中，通过`ssh`指令登陆**hadoop2**的虚拟机，这时候需要密码才能登陆<br>\n要做到免密登陆，就是在**hadoop1**虚拟机通过指令生成`.ssh`文件夹，生成密钥（包括私钥和公钥），将公钥通过`scp`指令远程拷贝到**hadoop2**虚拟机的`.ssh`文件夹中（拷贝前和hadoop1一样先生成.ssh文件夹）<br>\n拷贝之后，将**hadoop1**的公钥通过`cat`指令写到到`authorized_keys`文件中，即可完成免密登陆。**hadoop2**虚拟机要免密登陆**hadoop1**同理<br>\n下面具体来看下如何操作\n### 二、双向免密登陆操作过程\n首先，打开**hadoop1**虚拟机，输入指令`ssh-keygen -t rsa`，作用是生成`.ssh`文件夹，同时生成**密钥**到文件夹中<br>\n连续按下三下回车键即可（即默认设置），如有要修改的自行修改就好\n![在这里插入图片描述](https://img-blog.csdnimg.cn/afa9a973b15d4ce9b742f64298dc2e83.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_18,color_FFFFFF,t_70,g_se,x_16)\n\n同理，打开**hadoop2**虚拟机，输入一样的指令`ssh-keygen -t rsa`，连续按三下回车键默认设置\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a240d71fd1624f9bb04f3095c877818a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_18,color_FFFFFF,t_70,g_se,x_16)\n回到**hadoop1**虚拟机，输入指令`cd /root/.ssh`跳转到`.ssh`文件夹下，再输入指令`ls`查看当前目录\n![在这里插入图片描述](https://img-blog.csdnimg.cn/222f2d5ee1da4aabb7d296ce0b7f0f4a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_13,color_FFFFFF,t_70,g_se,x_16)\n可以看到生成两个密钥，其中`id_rsa`是私钥，`id_rsa.pub`是公钥，我们需要将`id_rsa.pub`公钥拷贝到**hadoop2**的虚拟机中<br>\n拷贝之前先**重新命名**，方便和其他虚拟机的公钥区分，避免把**hadoop2**的公钥给覆盖掉<br>\n输入指令`mv id_rsa.pub id_rsa_1.pub`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/dfed9d926025477caf2d6e2521164ed7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_15,color_FFFFFF,t_70,g_se,x_16)\n可以看到，文件名已经成功修改，接着就是远程拷贝到**hadoop2**虚拟机中<br>\n输入指令`scp id_rsa_1.pub root@hadoop2:/root/.ssh/`，首次拷贝需要输入yes和对方虚拟机的密码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6d22e591174d469aa13bd29305ef5289.png)\n这时候**haoop1**的已经拷贝成功，我们打开**hadoop2**虚拟机，在上面的时候就已经给**hadoop2**生成了`.ssh`文件夹和**密钥**，接着只需要<br>\n输入指令`cd /root/.ssh`跳转到`.ssh`文件夹\n输入指令`mv id_rsa.pub id_rsa_2.pub`修改公钥文件名\n输入指令`scp id_rsa_2.pub root@hadoop1:/root/.ssh/`拷贝到**hadoop1**虚拟机的`.ssh`文件夹中<br>\n执行结束之后输入`ls`可以看到在两台虚拟机中都各自有对方的公钥文件\n\n文件名|介绍\n----|---\nid_rsa|私钥文件\nid_rsa_1.pub|**hadoop1**的公钥文件\nid_rsa_2.pub|**hadoop2**的公钥文件\nknown_hosts|首次登陆其他虚拟机时创建的历史痕迹文件\n\n<img src=\"https://img-blog.csdnimg.cn/7e0dedebf6f14221b18f5c3e3c436016.png\"/>\n<img src=\"https://img-blog.csdnimg.cn/2059df65f7d64811bb51a04e6d1f22d8.png\"/><br>\n\n接着就是分别在**两台虚拟机**中将两个**公钥**文件写到`authorized_keys`文件中\n在**hadoop1**和**hadoop2**两台虚拟机中分别输入指令`cat id_rsa_1.pub id_rsa_2.pub >> authorized_keys`<br>\n写入成功之后可以输入指令`more authorized_keys`查看文件信息\n![在这里插入图片描述](https://img-blog.csdnimg.cn/58ec508b93484a749e023a47cc1b1b42.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n双向免密登陆到这里就结束了，最后我们来测试一下\n**hadoop1**登陆到**hadoop2**，可以看到不用再输入密码了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/724e88a095334c4e831bf489f9aad289.png)\n**hadoop2**登陆到**hadoop1**，可以看到一样不用输入密码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/0a7931e949c94b59ba4c4d289bbd00f3.png)\n输入指令`exit`可以退出登录\n\n>说明：\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文章中的`ssh hadoop1`、`scp ... root@hadoop1...`等命令中，可以将`hadoop1`换成`ip`地址也是一样的。<br>\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;案例中是通过主机名（也就是hadoop1）操作的，如发生报错，应该是没有配置主机名等，详细的请看上一篇文章的介绍——[Hadoop集群的搭建（一）——Liunx系统的网络配置，主机配置，多台虚拟机间的相互连通和远程操作。](https://blog.csdn.net/weixin_47971206/article/details/120634576)<br>\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时需要注意，在最开始操作之前确保两台虚拟机之间可以互相连通（ping）。\n\n---\n-  本次文章分享就到这，有什么疑问或有更好的建议可在评论区留言，也可以私信我\n- 感谢阅读~\n---', '<hr data-source=\"1\"></hr><ul data-source=\"2\"><li><p data-source=\"2\">注重版权，转载请注明原作者和原文链接</li>\n<li><p data-source=\"3\">作者：Yuan-Programmer</li>\n</ul>\n<hr data-source=\"4\"></hr><blockquote data-source=\"8\"><p data-source=\"7\"><strong>相关文章：</strong>\n<a href=\"https://blog.csdn.net/weixin_47971206/article/details/120634576\" target=\"_blank\">Hadoop集群的搭建（一）——Liunx系统的网络配置，主机配置，多台虚拟机间的相互连通和远程操作</a></p>\n</blockquote>\n<blockquote data-source=\"13\"><p data-source=\"10\"><strong>相关资源：</strong>\n<strong>VMware Workstation 16 pro（最新版） 安装包百度网盘下载地址</strong>\n链接：<a href=\"https://pan.baidu.com/s/1gI8rhENSl_V9RAmXfK-ClA\" target=\"_blank\">https://pan.baidu.com/s/1gI8rhENSl_V9RAmXfK-ClA</a>\n提取码：peu0 <br><br><strong>激活码可以在百度搜16pro版本的，网上有很多</strong></p>\n</blockquote>\n<p data-source=\"16\">我们在虚拟机中经常用ssh通过 <code>主机名</code> 或者 <code>ip</code> 登陆另一台虚拟机进行操作，但是每次登陆都需要输入密码，不方便团队间的合作开发，所以我们可以设置免密登陆，下次登陆其他虚拟机设备时就不需要再输入密码了<br></p>\n<p data-source=\"18\">我们在上期时候创建了两个虚拟机——<strong>hadoop1</strong>和<strong>hadoop2</strong>，这次继续用这两台虚拟机讲解双向免密登陆</p>\n<h3 data-source=\"19\"><a id=\"_18\"></a>一、免密登陆原理</h3>\n<p data-source=\"20\">假设我们要在<strong>hadoop1</strong>虚拟机中，通过<code>ssh</code>指令登陆<strong>hadoop2</strong>的虚拟机，这时候需要密码才能登陆<br>\n要做到免密登陆，就是在<strong>hadoop1</strong>虚拟机通过指令生成<code>.ssh</code>文件夹，生成密钥（包括私钥和公钥），将公钥通过<code>scp</code>指令远程拷贝到<strong>hadoop2</strong>虚拟机的<code>.ssh</code>文件夹中（拷贝前和hadoop1一样先生成.ssh文件夹）<br>\n拷贝之后，将<strong>hadoop1</strong>的公钥通过<code>cat</code>指令写到到<code>authorized_keys</code>文件中，即可完成免密登陆。<strong>hadoop2</strong>虚拟机要免密登陆<strong>hadoop1</strong>同理<br>\n下面具体来看下如何操作</p>\n<h3 data-source=\"24\"><a id=\"_23\"></a>二、双向免密登陆操作过程</h3>\n<p data-source=\"25\">首先，打开<strong>hadoop1</strong>虚拟机，输入指令<code>ssh-keygen -t rsa</code>，作用是生成<code>.ssh</code>文件夹，同时生成<strong>密钥</strong>到文件夹中<br>\n连续按下三下回车键即可（即默认设置），如有要修改的自行修改就好\n<img src=\"https://img-blog.csdnimg.cn/afa9a973b15d4ce9b742f64298dc2e83.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_18,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p data-source=\"29\">同理，打开<strong>hadoop2</strong>虚拟机，输入一样的指令<code>ssh-keygen -t rsa</code>，连续按三下回车键默认设置\n<img src=\"https://img-blog.csdnimg.cn/a240d71fd1624f9bb04f3095c877818a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_18,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\">\n回到<strong>hadoop1</strong>虚拟机，输入指令<code>cd /root/.ssh</code>跳转到<code>.ssh</code>文件夹下，再输入指令<code>ls</code>查看当前目录\n<img src=\"https://img-blog.csdnimg.cn/222f2d5ee1da4aabb7d296ce0b7f0f4a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_13,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\">\n可以看到生成两个密钥，其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥，我们需要将<code>id_rsa.pub</code>公钥拷贝到<strong>hadoop2</strong>的虚拟机中<br>\n拷贝之前先<strong>重新命名</strong>，方便和其他虚拟机的公钥区分，避免把<strong>hadoop2</strong>的公钥给覆盖掉<br>\n输入指令<code>mv id_rsa.pub id_rsa_1.pub</code>\n<img src=\"https://img-blog.csdnimg.cn/dfed9d926025477caf2d6e2521164ed7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_15,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\">\n可以看到，文件名已经成功修改，接着就是远程拷贝到<strong>hadoop2</strong>虚拟机中<br>\n输入指令<code>scp id_rsa_1.pub root@hadoop2:/root/.ssh/</code>，首次拷贝需要输入yes和对方虚拟机的密码\n<img src=\"https://img-blog.csdnimg.cn/6d22e591174d469aa13bd29305ef5289.png\" alt=\"在这里插入图片描述\">\n这时候<strong>haoop1</strong>的已经拷贝成功，我们打开<strong>hadoop2</strong>虚拟机，在上面的时候就已经给<strong>hadoop2</strong>生成了<code>.ssh</code>文件夹和<strong>密钥</strong>，接着只需要<br>\n输入指令<code>cd /root/.ssh</code>跳转到<code>.ssh</code>文件夹\n输入指令<code>mv id_rsa.pub id_rsa_2.pub</code>修改公钥文件名\n输入指令<code>scp id_rsa_2.pub root@hadoop1:/root/.ssh/</code>拷贝到<strong>hadoop1</strong>虚拟机的<code>.ssh</code>文件夹中<br>\n执行结束之后输入<code>ls</code>可以看到在两台虚拟机中都各自有对方的公钥文件</p>\n<table data-source=\"46\"><thead>\n<tr>\n<th>文件名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id_rsa</td>\n<td>私钥文件</td>\n</tr>\n<tr>\n<td>id_rsa_1.pub</td>\n<td><strong>hadoop1</strong>的公钥文件</td>\n</tr>\n<tr>\n<td>id_rsa_2.pub</td>\n<td><strong>hadoop2</strong>的公钥文件</td>\n</tr>\n<tr>\n<td>known_hosts</td>\n<td>首次登陆其他虚拟机时创建的历史痕迹文件</td>\n</tr>\n</tbody>\n</table>\n<img src=\"https://img-blog.csdnimg.cn/7e0dedebf6f14221b18f5c3e3c436016.png\"/>\n<img src=\"https://img-blog.csdnimg.cn/2059df65f7d64811bb51a04e6d1f22d8.png\"/><br>\n<p data-source=\"56\">接着就是分别在<strong>两台虚拟机</strong>中将两个<strong>公钥</strong>文件写到<code>authorized_keys</code>文件中\n在<strong>hadoop1</strong>和<strong>hadoop2</strong>两台虚拟机中分别输入指令<code>cat id_rsa_1.pub id_rsa_2.pub &gt;&gt; authorized_keys</code><br>\n写入成功之后可以输入指令<code>more authorized_keys</code>查看文件信息\n<img src=\"https://img-blog.csdnimg.cn/58ec508b93484a749e023a47cc1b1b42.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\">\n双向免密登陆到这里就结束了，最后我们来测试一下\n<strong>hadoop1</strong>登陆到<strong>hadoop2</strong>，可以看到不用再输入密码了\n<img src=\"https://img-blog.csdnimg.cn/724e88a095334c4e831bf489f9aad289.png\" alt=\"在这里插入图片描述\">\n<strong>hadoop2</strong>登陆到<strong>hadoop1</strong>，可以看到一样不用输入密码\n<img src=\"https://img-blog.csdnimg.cn/0a7931e949c94b59ba4c4d289bbd00f3.png\" alt=\"在这里插入图片描述\">\n输入指令<code>exit</code>可以退出登录</p>\n<blockquote data-source=\"70\"><p data-source=\"67\">说明：\n       本文章中的<code>ssh hadoop1</code>、<code>scp ... root@hadoop1...</code>等命令中，可以将<code>hadoop1</code>换成<code>ip</code>地址也是一样的。<br>\n       案例中是通过主机名（也就是hadoop1）操作的，如发生报错，应该是没有配置主机名等，详细的请看上一篇文章的介绍——<a href=\"https://blog.csdn.net/weixin_47971206/article/details/120634576\" target=\"_blank\">Hadoop集群的搭建（一）——Liunx系统的网络配置，主机配置，多台虚拟机间的相互连通和远程操作。</a><br>\n       同时需要注意，在最开始操作之前确保两台虚拟机之间可以互相连通（ping）。</p>\n</blockquote>\n<hr data-source=\"72\"></hr><ul data-source=\"73\"><li><p data-source=\"73\">本次文章分享就到这，有什么疑问或有更好的建议可在评论区留言，也可以私信我</li>\n<li><p data-source=\"74\">感谢阅读~</li>\n</ul>\n<hr data-source=\"75\"></hr>');
INSERT INTO `xy_article_content` VALUES (1518850191648710657, 1518850191569018882, '> - **注重版权，转载请注明原作者和原文链接🤤**\n>- **作者：Yuan-Programmer的🤤**\n>- **链接：[https://blog.csdn.net/weixin_47971206/article/details/124199978](https://blog.csdn.net/weixin_47971206/article/details/124199978)**\n>- **进来的小伙伴点点赞呀😋**\n\n@[toc](目录)\n## 一、前言\n我们在项目开发过程，经常会遇到有文章分类分栏，菜单分类，视频分类等多级分类\n\n那么这种多级分类我们在数据中又是如何设计的呢？在mybatis查询过程中又是如何多级查询的呢？\n\n别着急，今年我们来解决这个需求，\n\n当然，解决的方法有很多，这里我只介绍我自己使用的一种，有更好的方法可以评论区评论大家一起探讨\n\n本次用到了 `Maven工程`、`Swagger`、`RESTful接口风格`、`MyBatis-Plus`\n\n**整体目录结构如下**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4886a194299c409fad607574996d495b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n## 二、问题需求\n以文章分类为例（这里以二级分类举例，三级、四级甚至多级会了二级的之后可以自行思考）\n\n博客项目中少不了文章分类，如下图所示，那么在数据库如何只使用一张表、一条SQL语句就能完美实现多级目录结构的存储和查询\n![在这里插入图片描述](https://img-blog.csdnimg.cn/d7e7f43660c044a38667b33b83587eb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_9,color_FFFFFF,t_70,g_se,x_16)\n## 三、数据库设计\n我们需要设计三个字段\n| 字段名 | 类型 | 注释 |\n|--|--|--|\n| id | int | 这个不用说了吧，主键 |\n| name | varchar | 分类名称 |\n| parent_id| int | 指向父级分类的ID，如果是父级分类则填0，如果是子分类则填父级分类的ID |\n\n接下来我们在mysql中创建出来\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/afeebf5acfdf4798be3798477dca4cac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n## 四、SQL多级分类查询\n不知道大家都有没有用过 `join` 这个关键字呢，想必大家都挺少用到的吧，忘记的同学记得先去补补 `join` 的知识哦\n\n采用 `left join` 左拼接的查询方式，完整的查询语句如下：\n\n```sql\nSELECT x.id AS parentId, x.name AS parentName, y.id AS childrenId ,y.name AS childrenName\nFROM xy_category AS x\nLEFT JOIN xy_category AS y ON y.parent_id = x.id\nWHERE x.parent_id = 0\n```\n查询结果如下（所有分类结构）：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/bc7974e7384043d7bb7658540c341e47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_15,color_FFFFFF,t_70,g_se,x_16)\n\n当然你也可以指定某个父级分类，查询它所有的子分类，只需要改变一下 `where` 的条件就行了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/ea817c17c4304b6a9e49938b62f763b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n是不是就满足了我们的需求了呢，接下来我们在项目MyBatis-Plus中实现多级分类查询\n\n查询SQL语句我们已经写出来了，难的是如何存储这样的结构数据，别着急慢慢来\n\n## 五、项目结构搭建\n先把完整结构创建完成，这个大家应该都很熟悉了吧\n\n我这里使用的MyBatis-Plus，操作都差不多，用MyBatis也可以\n#### （1）创建实体类\n\n```java\n/**\n * FileName:    Category\n * Author:      小袁\n * Date:        2022/4/15 10:42\n * Description: 分类实体\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@Accessors(chain = true) // 调用Setting方法后 回传对象\npublic class Category {\n\n    /**\n     * 分类ID\n     */\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 分类栏目名称\n     */\n    private String name;\n\n    /**\n     * 父级栏目\n     */\n    private Integer parent_id;\n}\n```\n#### （2）创建DAO\n\n```java\n/**\n * FileName:    CategoryMapper\n * Author:      小袁\n * Date:        2022/4/15 10:52\n * Description: 分类DAO\n */\n@Repository\npublic interface CategoryMapper extends BaseMapper<Category> {\n\n    /**\n     * 查询所有分类的目录结构\n     * @return\n     */\n    List<CategoryParentVo> findCategoryList();\n\n    /**\n     * 通过某个父级分类的ID查询该父级的所有子分类\n     * @param id\n     * @return\n     */\n    CategoryParentVo getCategoryById(Integer id);\n}\n```\n#### （3）创建业务层\n\n> 我这里把完整的增删改查全部放出来了，这是我之前做的博客项目，可自行删减\n> `R` 这个类是统一结果返回类，前后端分析基本都是这样操作，网上也有很多模板\n\n###### service -- 接口\n```java\n/**\n * FileName:    CategoryService\n * Author:      小袁\n * Date:        2022/4/15 10:52\n * Description: 分类栏目 Service\n */\npublic interface CategoryService extends IService<Category> {\n\n    /**\n     * 新增分类栏目数据\n     * @param category\n     * @return\n     */\n    R insert(Category category);\n\n    /**\n     * 根据分类栏目的ID进行修改数据\n     * @param category\n     * @return\n     */\n    R modify(Category category);\n\n    /**\n     * 根据分类栏目的ID进行删除\n     * @param id\n     * @return\n     */\n    R remove(Integer id);\n\n    /**\n     * 通过某个父级分类的ID查询该父级的所有子分类\n     * @param id\n     * @return\n     */\n    R getCategoryById(Integer id);\n\n    /**\n     * 查询所有分类的目录结构\n     * @return\n     */\n    R listCategory();\n}\n```\n###### servieImpl -- 实现类\n```java\n/**\n * FileName:    CategoryServiceImpl\n * Author:      小袁\n * Date:        2022/4/15 10:54\n * Description: 分类栏目的实现类\n */\n@Service\n@Transactional\npublic class CategoryServiceImpl extends ServiceImpl<CategoryMapper, Category> implements CategoryService {\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    @Override\n    public R insert(Category category) {\n        return categoryMapper.insert(category) == 0 ? R.error() : R.ok();\n    }\n\n    @Override\n    public R modify(Category category) {\n        return categoryMapper.updateById(category) == 0 ? R.error() : R.ok();\n    }\n\n    @Override\n    public R remove(Integer id) {\n        QueryWrapper<Category> wrapper = new QueryWrapper<>();\n        wrapper.eq(\"id\", id);\n        wrapper.or();\n        wrapper.eq(\"parent_id\", id);\n        return categoryMapper.delete(wrapper) == 0 ? R.error() : R.ok();\n    }\n\n    @Override\n    public R getCategoryById(Integer id) {\n        CategoryParentVo categoryParentVo = categoryMapper.getCategoryById(id);\n        return categoryParentVo == null ? R.error() : R.ok().data(\"category\", categoryParentVo);\n    }\n\n    @Override\n    public R listCategory() {\n        return R.ok().data(\"categoryList\", categoryMapper.findCategoryList());\n    }\n}\n```\n\n#### （4）控制层\n这里我也是将所有的代码贴出来，自行需要删除\n\n> 采用RESTful的接口风格，@Api相关的注解是 `Swagger` 的相关配置，用于接口测试，你用其他测试方法可以把这个删掉\n\n```java\n/**\n * FileName:    CategoryController\n * Author:      小袁\n * Date:        2022/4/15 10:54\n * Description: 分类栏目的控制层\n */\n@RestController\n@RequestMapping(\"/category\")\n@Api(tags = \"分类栏目控制层\")\npublic class CategoryController {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    /**\n     * 新增分类栏目数据\n     * @param category\n     * @return\n     */\n    @PostMapping\n    public R insertCategory(@RequestBody Category category) {\n        return categoryService.insert(category);\n    }\n\n    /**\n     * 根据ID删除分类栏目\n     * @param id\n     * @return\n     */\n    @DeleteMapping(\"{id}\")\n    @ApiOperation(value = \"根据ID删除所有子分类栏目（包括父级分类如果有）\")\n    public R removeCategoryById(@PathVariable(value = \"id\") Integer id) {\n        return categoryService.remove(id);\n    }\n\n    @PutMapping\n    public R modifyCategoryById(@RequestBody Category category) {\n        return categoryService.modify(category);\n    }\n\n    /**\n     * 查询所有分类的目录结构\n     * @return\n     */\n    @GetMapping\n    @ApiOperation(value = \"查询所有分类的目录结构\")\n    public R getCategoryList() {\n        return categoryService.listCategory();\n    }\n\n    /**\n     * 根据ID获取对象\n     * @param id\n     * @return\n     */\n    @GetMapping(\"{id}\")\n    @ApiOperation(value = \"根据ID获取对象\")\n    public R getCategoryById(@PathVariable(value = \"id\") Integer id) {\n        return categoryService.getCategoryById(id);\n    }\n}\n```\n## 六、Vo对象\n\n> 一会接收SQL多级查询结果要用到的，也叫视图对象（View Object），返回给前端看的\n\n父级分类\n\n```java\n/**\n * FileName:    CategoryVo\n * Author:      小袁\n * Date:        2022/4/15 14:16\n * Description:\n */\n@Data\npublic class CategoryParentVo {\n\n    // 父级分类编号ID\n    private Integer parentId;\n\n    // 父级分类名称\n    private String parentName;\n\n    // 子分类\n    private List<CategoryChildrenVo> childrenCategory;\n}\n```\n子分类\n\n```java\n/**\n * FileName:    CategoryChildrenVo\n * Author:      小袁\n * Date:        2022/4/15 14:18\n * Description: 子分类\n */\n@Data\npublic class CategoryChildrenVo {\n\n    // ID编号\n    private Integer childrenId;\n\n    // 分类栏目名称\n    private String childrenName;\n}\n\n```\n## 七、MyBatis多级分类查询\n#### （1）在resources目录下创建CategoryMapper.xml静态文件\n用来写SQL语句的\n\n> 别忘了在 `application` 加上mapper映射路径\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2c39ad6ea610420c8dfb1068352eab22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.xiaoyuan.back.db.dao.CategoryMapper\">\n	<!-- SQL语句 -->\n</mapper>\n```\n#### （2）设计模式\n回顾一下刚刚的数据格式，有点像什么？细心的同学已经发现了，没错，是不是和 `JSON` 数据格式有点类似？\n\n将父级分类（Java、实战项目教学等）对应一个CategoryParentVo类\n\n将每个父级分类的所有子分类对应一个List<CategoryChildrenVo>集合\n\n每个CategoryParentVo有一个字分类的集合属性变量\n\n> 看懂上面三句话就说明你已经掌握了，看不懂的结合创建Vo类看一下\n \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/30922ae85903445796bf333245732485.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n#### （3）自定义返回类型模板（重点）\n\n> MyBatis的知识哦，不知道大伙忘了没？\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.xiaoyuan.back.db.dao.CategoryMapper\">\n\n    <!-- 自定义返回数据类型模板 -->\n    <resultMap id=\"categoryMap\" type=\"com.xiaoyuan.back.vo.CategoryParentVo\">\n        <!-- 父级分类（ID、分类名称） 单个 对象 -->\n        <id property=\"parentId\" column=\"parentId\"></id>\n        <result property=\"parentName\" column=\"parentName\"></result>\n        <!-- 子分类（ID、分类名称） 多个 List集合 -->\n        <collection property=\"childrenCategory\" ofType=\"com.xiaoyuan.back.vo.CategoryChildrenVo\" javaType=\"list\">\n            <id property=\"childrenId\" column=\"childrenId\"></id>\n            <result property=\"childrenName\" column=\"childrenName\"></result>\n        </collection>\n    </resultMap>\n</mapper>\n```\n#### （4）编写SQL\n完整的CategoryMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.xiaoyuan.back.db.dao.CategoryMapper\">\n\n    <!-- 自定义返回数据类型模板 -->\n    <resultMap id=\"categoryMap\" type=\"com.xiaoyuan.back.vo.CategoryParentVo\">\n        <id property=\"parentId\" column=\"parentId\"></id>\n        <result property=\"parentName\" column=\"parentName\"></result>\n        <collection property=\"childrenCategory\" ofType=\"com.xiaoyuan.back.vo.CategoryChildrenVo\" javaType=\"list\">\n            <id property=\"childrenId\" column=\"childrenId\"></id>\n            <result property=\"childrenName\" column=\"childrenName\"></result>\n        </collection>\n    </resultMap>\n    <!--\n     查询所有分类的目录结构\n     父级分类 ==>> 子分类\n     -->\n    <select id=\"findCategoryList\" resultMap=\"categoryMap\">\n        select x.id as parentId, x.name as parentName, y.id as childrenId ,y.name as childrenName\n        from xy_category x\n        left join xy_category as y on y.parent_id = x.id\n        where x.parent_id = 0\n    </select>\n\n    <!--\n    通过某个父级分类的ID查询该父级的所有子分类\n    父级分类 ==>> 子分类\n    -->\n    <select id=\"getCategoryById\" parameterType=\"int\" resultMap=\"categoryMap\">\n        select x.id as parentId, x.name as parentName, y.id as childrenId ,y.name as childrenName\n        from xy_category x\n        left join xy_category as y on y.parent_id = x.id\n        where x.id = #{id}\n    </select>\n</mapper>\n```\n## 八、Swagger接口测试\n我这个项目整合了 `Swagger` 进行接口测试，网上很多整合的教程，只需要加一个配置类就搞定了，一分钟就行，我这里附上吧\n\n**依赖**\n```xml\n<!-- Swagger -->\n<dependency>\n	<groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.7.0</version>\n</dependency>\n    <dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.7.0</version>\n</dependency>\n```\n\n```java\n/**\n * FileName:    SwaggerConfig\n * Author:      小袁\n * Date:        2022/3/11 19:09\n * Description:\n */\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket webApiConfig(){\n\n        return new Docket(DocumentationType.SWAGGER_2)\n                .groupName(\"webApi\")\n                .apiInfo(webApiInfo())\n                .select()\n                .paths(Predicates.not(PathSelectors.regex(\"/admin/.*\")))\n                .paths(Predicates.not(PathSelectors.regex(\"/error.*\")))\n                .build();\n\n    }\n\n    private ApiInfo webApiInfo(){\n\n        return new ApiInfoBuilder()\n                .title(\"Swagger接口测试\")\n                .description(\"小袁同学\")\n                .version(\"1.0\")\n                .contact(new Contact(\"Helen\", \"http://www.baidu.com\", \"1971788445@qq.com\"))\n                .build();\n    }\n}\n```\n**打开网页进行测试**\n  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/ba674476cd654232ae0596c938e066c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n  \n执行查询所有分类的接口，测试结果如下，ok完美获取数据\n  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/bfc2f1c508d64837a0ce56fcea17d490.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/06e5b3de565247369562e09e47dc44d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n  \n或者直接在浏览器访问请求路径测试\n  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/ce54cf9040154ba39306b5f8a7401972.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n\n> - **都看到这里啦，点点赞呀😋**\n> - **感谢阅读😘**\n', '<blockquote data-source=\"4\"><ul data-source=\"1\"><li><p data-source=\"1\"><strong>注重版权，转载请注明原作者和原文链接🤤</strong></li>\n<li><p data-source=\"2\"><strong>作者：Yuan-Programmer的🤤</strong></li>\n<li><p data-source=\"3\"><strong>链接：<a href=\"https://blog.csdn.net/weixin_47971206/article/details/124199978\" target=\"_blank\">https://blog.csdn.net/weixin_47971206/article/details/124199978</a></strong></li>\n<li><p data-source=\"4\"><strong>进来的小伙伴点点赞呀😋</strong></li>\n</ul>\n</blockquote>\n<p data-source=\"6\"><h3>目录</h3><ul><ul><li><a href=\"#_6\">一、前言</a></li><li><a href=\"#_21\">二、问题需求</a></li><li><a href=\"#_26\">三、数据库设计</a></li><li><a href=\"#SQL_37\">四、SQL多级分类查询</a></li><li><a href=\"#_59\">五、项目结构搭建</a></li><ul><ul><li><a href=\"#1_63\">（1）创建实体类</a></li><li><a href=\"#2DAO_94\">（2）创建DAO</a></li><li><a href=\"#3_120\">（3）创建业务层</a></li><ul><ul><li><a href=\"#service___125\">service -- 接口</a></li><li><a href=\"#servieImpl___170\">servieImpl -- 实现类</a></li></ul></ul><li><a href=\"#4_217\">（4）控制层</a></li></ul></ul><li><a href=\"#Vo_285\">六、Vo对象</a></li><li><a href=\"#MyBatis_331\">七、MyBatis多级分类查询</a></li><ul><ul><li><a href=\"#1resourcesCategoryMapperxml_332\">（1）在resources目录下创建CategoryMapper.xml静态文件</a></li><li><a href=\"#2_345\">（2）设计模式</a></li><li><a href=\"#3_358\">（3）自定义返回类型模板（重点）</a></li><li><a href=\"#4SQL_380\">（4）编写SQL</a></li></ul></ul><li><a href=\"#Swagger_420\">八、Swagger接口测试</a></li></ul></ul></p>\n<h2 data-source=\"7\"><a id=\"_6\"></a>一、前言</h2>\n<p data-source=\"8\">我们在项目开发过程，经常会遇到有文章分类分栏，菜单分类，视频分类等多级分类</p>\n<p data-source=\"10\">那么这种多级分类我们在数据中又是如何设计的呢？在mybatis查询过程中又是如何多级查询的呢？</p>\n<p data-source=\"12\">别着急，今年我们来解决这个需求，</p>\n<p data-source=\"14\">当然，解决的方法有很多，这里我只介绍我自己使用的一种，有更好的方法可以评论区评论大家一起探讨</p>\n<p data-source=\"16\">本次用到了 <code>Maven工程</code>、<code>Swagger</code>、<code>RESTful接口风格</code>、<code>MyBatis-Plus</code></p>\n<p data-source=\"18\"><strong>整体目录结构如下</strong></p>\n<p data-source=\"20\"><img src=\"https://img-blog.csdnimg.cn/4886a194299c409fad607574996d495b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"22\"><a id=\"_21\"></a>二、问题需求</h2>\n<p data-source=\"23\">以文章分类为例（这里以二级分类举例，三级、四级甚至多级会了二级的之后可以自行思考）</p>\n<p data-source=\"25\">博客项目中少不了文章分类，如下图所示，那么在数据库如何只使用一张表、一条SQL语句就能完美实现多级目录结构的存储和查询\n<img src=\"https://img-blog.csdnimg.cn/d7e7f43660c044a38667b33b83587eb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_9,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"27\"><a id=\"_26\"></a>三、数据库设计</h2>\n<p data-source=\"28\">我们需要设计三个字段</p>\n<table data-source=\"29\"><thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td>这个不用说了吧，主键</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar</td>\n<td>分类名称</td>\n</tr>\n<tr>\n<td>parent_id</td>\n<td>int</td>\n<td>指向父级分类的ID，如果是父级分类则填0，如果是子分类则填父级分类的ID</td>\n</tr>\n</tbody>\n</table>\n<p data-source=\"35\">接下来我们在mysql中创建出来</p>\n<p data-source=\"37\"><img src=\"https://img-blog.csdnimg.cn/afeebf5acfdf4798be3798477dca4cac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"38\"><a id=\"SQL_37\"></a>四、SQL多级分类查询</h2>\n<p data-source=\"39\">不知道大家都有没有用过 <code>join</code> 这个关键字呢，想必大家都挺少用到的吧，忘记的同学记得先去补补 <code>join</code> 的知识哦</p>\n<p data-source=\"41\">采用 <code>left join</code> 左拼接的查询方式，完整的查询语句如下：</p>\n<pre class=\"hljs\" data-source=\"43\"><code><span class=\"hljs-keyword\">SELECT</span> x.id <span class=\"hljs-keyword\">AS</span> parentId, x.name <span class=\"hljs-keyword\">AS</span> parentName, y.id <span class=\"hljs-keyword\">AS</span> childrenId ,y.name <span class=\"hljs-keyword\">AS</span> childrenName\n<span class=\"hljs-keyword\">FROM</span> xy_category <span class=\"hljs-keyword\">AS</span> x\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> xy_category <span class=\"hljs-keyword\">AS</span> y <span class=\"hljs-keyword\">ON</span> y.parent_id = x.id\n<span class=\"hljs-keyword\">WHERE</span> x.parent_id = <span class=\"hljs-number\">0</span></code></pre><p data-source=\"49\">查询结果如下（所有分类结构）：</p>\n<p data-source=\"51\"><img src=\"https://img-blog.csdnimg.cn/bc7974e7384043d7bb7658540c341e47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_15,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p data-source=\"53\">当然你也可以指定某个父级分类，查询它所有的子分类，只需要改变一下 <code>where</code> 的条件就行了</p>\n<p data-source=\"55\"><img src=\"https://img-blog.csdnimg.cn/ea817c17c4304b6a9e49938b62f763b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\">\n是不是就满足了我们的需求了呢，接下来我们在项目MyBatis-Plus中实现多级分类查询</p>\n<p data-source=\"58\">查询SQL语句我们已经写出来了，难的是如何存储这样的结构数据，别着急慢慢来</p>\n<h2 data-source=\"60\"><a id=\"_59\"></a>五、项目结构搭建</h2>\n<p data-source=\"61\">先把完整结构创建完成，这个大家应该都很熟悉了吧</p>\n<p data-source=\"63\">我这里使用的MyBatis-Plus，操作都差不多，用MyBatis也可以</p>\n<h4 data-source=\"64\"><a id=\"1_63\"></a>（1）创建实体类</h4>\n<pre class=\"hljs\" data-source=\"66\"><code><span class=\"hljs-comment\">/**\n * FileName:    Category\n * Author:      小袁\n * Date:        2022/4/15 10:42\n * Description: 分类实体\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"hljs-keyword\">false</span>)\n<span class=\"hljs-meta\">@Accessors</span>(chain = <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-comment\">// 调用Setting方法后 回传对象</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Category</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 分类ID\n     */</span>\n    <span class=\"hljs-meta\">@TableId</span>(value = <span class=\"hljs-string\">\"id\"</span>, type = IdType.AUTO)\n    <span class=\"hljs-keyword\">private</span> Integer id;\n\n    <span class=\"hljs-comment\">/**\n     * 分类栏目名称\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-comment\">/**\n     * 父级栏目\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Integer parent_id;\n}</code></pre><h4 data-source=\"95\"><a id=\"2DAO_94\"></a>（2）创建DAO</h4>\n<pre class=\"hljs\" data-source=\"97\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryMapper\n * Author:      小袁\n * Date:        2022/4/15 10:52\n * Description: 分类DAO\n */</span>\n<span class=\"hljs-meta\">@Repository</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CategoryMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseMapper</span>&lt;<span class=\"hljs-title\">Category</span>&gt; </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 查询所有分类的目录结构\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">List&lt;CategoryParentVo&gt; <span class=\"hljs-title\">findCategoryList</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 通过某个父级分类的ID查询该父级的所有子分类\n     * <span class=\"hljs-doctag\">@param</span> id\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">CategoryParentVo <span class=\"hljs-title\">getCategoryById</span><span class=\"hljs-params\">(Integer id)</span></span>;\n}</code></pre><h4 data-source=\"121\"><a id=\"3_120\"></a>（3）创建业务层</h4>\n<blockquote data-source=\"124\"><p data-source=\"123\">我这里把完整的增删改查全部放出来了，这是我之前做的博客项目，可自行删减\n<code>R</code> 这个类是统一结果返回类，前后端分析基本都是这样操作，网上也有很多模板</p>\n</blockquote>\n<h6 data-source=\"126\"><a id=\"service___125\"></a>service – 接口</h6>\n<pre class=\"hljs\" data-source=\"127\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryService\n * Author:      小袁\n * Date:        2022/4/15 10:52\n * Description: 分类栏目 Service\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CategoryService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">IService</span>&lt;<span class=\"hljs-title\">Category</span>&gt; </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 新增分类栏目数据\n     * <span class=\"hljs-doctag\">@param</span> category\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Category category)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据分类栏目的ID进行修改数据\n     * <span class=\"hljs-doctag\">@param</span> category\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">modify</span><span class=\"hljs-params\">(Category category)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据分类栏目的ID进行删除\n     * <span class=\"hljs-doctag\">@param</span> id\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Integer id)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 通过某个父级分类的ID查询该父级的所有子分类\n     * <span class=\"hljs-doctag\">@param</span> id\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">getCategoryById</span><span class=\"hljs-params\">(Integer id)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 查询所有分类的目录结构\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">listCategory</span><span class=\"hljs-params\">()</span></span>;\n}</code></pre><h6 data-source=\"171\"><a id=\"servieImpl___170\"></a>servieImpl – 实现类</h6>\n<pre class=\"hljs\" data-source=\"172\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryServiceImpl\n * Author:      小袁\n * Date:        2022/4/15 10:54\n * Description: 分类栏目的实现类\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Transactional</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CategoryServiceImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ServiceImpl</span>&lt;<span class=\"hljs-title\">CategoryMapper</span>, <span class=\"hljs-title\">Category</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CategoryService</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> CategoryMapper categoryMapper;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Category category)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> categoryMapper.insert(category) == <span class=\"hljs-number\">0</span> ? R.error() : R.ok();\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">modify</span><span class=\"hljs-params\">(Category category)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> categoryMapper.updateById(category) == <span class=\"hljs-number\">0</span> ? R.error() : R.ok();\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Integer id)</span> </span>{\n        QueryWrapper&lt;Category&gt; wrapper = <span class=\"hljs-keyword\">new</span> QueryWrapper&lt;&gt;();\n        wrapper.eq(<span class=\"hljs-string\">\"id\"</span>, id);\n        wrapper.or();\n        wrapper.eq(<span class=\"hljs-string\">\"parent_id\"</span>, id);\n        <span class=\"hljs-keyword\">return</span> categoryMapper.delete(wrapper) == <span class=\"hljs-number\">0</span> ? R.error() : R.ok();\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">getCategoryById</span><span class=\"hljs-params\">(Integer id)</span> </span>{\n        CategoryParentVo categoryParentVo = categoryMapper.getCategoryById(id);\n        <span class=\"hljs-keyword\">return</span> categoryParentVo == <span class=\"hljs-keyword\">null</span> ? R.error() : R.ok().data(<span class=\"hljs-string\">\"category\"</span>, categoryParentVo);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">listCategory</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> R.ok().data(<span class=\"hljs-string\">\"categoryList\"</span>, categoryMapper.findCategoryList());\n    }\n}</code></pre><h4 data-source=\"218\"><a id=\"4_217\"></a>（4）控制层</h4>\n<p data-source=\"219\">这里我也是将所有的代码贴出来，自行需要删除</p>\n<blockquote data-source=\"221\"><p data-source=\"221\">采用RESTful的接口风格，@Api相关的注解是 <code>Swagger</code> 的相关配置，用于接口测试，你用其他测试方法可以把这个删掉</p>\n</blockquote>\n<pre class=\"hljs\" data-source=\"223\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryController\n * Author:      小袁\n * Date:        2022/4/15 10:54\n * Description: 分类栏目的控制层\n */</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/category\"</span>)\n<span class=\"hljs-meta\">@Api</span>(tags = <span class=\"hljs-string\">\"分类栏目控制层\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CategoryController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> CategoryService categoryService;\n\n    <span class=\"hljs-comment\">/**\n     * 新增分类栏目数据\n     * <span class=\"hljs-doctag\">@param</span> category\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@PostMapping</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">insertCategory</span><span class=\"hljs-params\">(@RequestBody Category category)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> categoryService.insert(category);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 根据ID删除分类栏目\n     * <span class=\"hljs-doctag\">@param</span> id\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@DeleteMapping</span>(<span class=\"hljs-string\">\"{id}\"</span>)\n    <span class=\"hljs-meta\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"根据ID删除所有子分类栏目（包括父级分类如果有）\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">removeCategoryById</span><span class=\"hljs-params\">(@PathVariable(value = <span class=\"hljs-string\">\"id\"</span>)</span> Integer id) </span>{\n        <span class=\"hljs-keyword\">return</span> categoryService.remove(id);\n    }\n\n    <span class=\"hljs-meta\">@PutMapping</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">modifyCategoryById</span><span class=\"hljs-params\">(@RequestBody Category category)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> categoryService.modify(category);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 查询所有分类的目录结构\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@GetMapping</span>\n    <span class=\"hljs-meta\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"查询所有分类的目录结构\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">getCategoryList</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> categoryService.listCategory();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 根据ID获取对象\n     * <span class=\"hljs-doctag\">@param</span> id\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"{id}\"</span>)\n    <span class=\"hljs-meta\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"根据ID获取对象\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">getCategoryById</span><span class=\"hljs-params\">(@PathVariable(value = <span class=\"hljs-string\">\"id\"</span>)</span> Integer id) </span>{\n        <span class=\"hljs-keyword\">return</span> categoryService.getCategoryById(id);\n    }\n}</code></pre><h2 data-source=\"286\"><a id=\"Vo_285\"></a>六、Vo对象</h2>\n<blockquote data-source=\"288\"><p data-source=\"288\">一会接收SQL多级查询结果要用到的，也叫视图对象（View Object），返回给前端看的</p>\n</blockquote>\n<p data-source=\"290\">父级分类</p>\n<pre class=\"hljs\" data-source=\"292\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryVo\n * Author:      小袁\n * Date:        2022/4/15 14:16\n * Description:\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CategoryParentVo</span> </span>{\n\n    <span class=\"hljs-comment\">// 父级分类编号ID</span>\n    <span class=\"hljs-keyword\">private</span> Integer parentId;\n\n    <span class=\"hljs-comment\">// 父级分类名称</span>\n    <span class=\"hljs-keyword\">private</span> String parentName;\n\n    <span class=\"hljs-comment\">// 子分类</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;CategoryChildrenVo&gt; childrenCategory;\n}</code></pre><p data-source=\"312\">子分类</p>\n<pre class=\"hljs\" data-source=\"314\"><code><span class=\"hljs-comment\">/**\n * FileName:    CategoryChildrenVo\n * Author:      小袁\n * Date:        2022/4/15 14:18\n * Description: 子分类\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CategoryChildrenVo</span> </span>{\n\n    <span class=\"hljs-comment\">// ID编号</span>\n    <span class=\"hljs-keyword\">private</span> Integer childrenId;\n\n    <span class=\"hljs-comment\">// 分类栏目名称</span>\n    <span class=\"hljs-keyword\">private</span> String childrenName;\n}</code></pre><h2 data-source=\"332\"><a id=\"MyBatis_331\"></a>七、MyBatis多级分类查询</h2>\n<h4 data-source=\"333\"><a id=\"1resourcesCategoryMapperxml_332\"></a>（1）在resources目录下创建CategoryMapper.xml静态文件</h4>\n<p data-source=\"334\">用来写SQL语句的</p>\n<blockquote data-source=\"337\"><p data-source=\"336\">别忘了在 <code>application</code> 加上mapper映射路径\n<img src=\"https://img-blog.csdnimg.cn/2c39ad6ea610420c8dfb1068352eab22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<pre class=\"hljs\" data-source=\"339\"><code><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.db.dao.CategoryMapper\"</span>&gt;</span>\n	<span class=\"hljs-comment\">&lt;!-- SQL语句 --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span></code></pre><h4 data-source=\"346\"><a id=\"2_345\"></a>（2）设计模式</h4>\n<p data-source=\"347\">回顾一下刚刚的数据格式，有点像什么？细心的同学已经发现了，没错，是不是和 <code>JSON</code> 数据格式有点类似？</p>\n<p data-source=\"349\">将父级分类（Java、实战项目教学等）对应一个CategoryParentVo类</p>\n<p data-source=\"351\">将每个父级分类的所有子分类对应一个List<CategoryChildrenVo>集合</p>\n<p data-source=\"353\">每个CategoryParentVo有一个字分类的集合属性变量</p>\n<blockquote data-source=\"355\"><p data-source=\"355\">看懂上面三句话就说明你已经掌握了，看不懂的结合创建Vo类看一下</p>\n</blockquote>\n<p data-source=\"358\"><img src=\"https://img-blog.csdnimg.cn/30922ae85903445796bf333245732485.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"359\"><a id=\"3_358\"></a>（3）自定义返回类型模板（重点）</h4>\n<blockquote data-source=\"361\"><p data-source=\"361\">MyBatis的知识哦，不知道大伙忘了没？</p>\n</blockquote>\n<pre class=\"hljs\" data-source=\"363\"><code><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.db.dao.CategoryMapper\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 自定义返回数据类型模板 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resultMap</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"categoryMap\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.vo.CategoryParentVo\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 父级分类（ID、分类名称） 单个 对象 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"parentId\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"parentId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">result</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"parentName\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"parentName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">result</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 子分类（ID、分类名称） 多个 List集合 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">collection</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenCategory\"</span> <span class=\"hljs-attr\">ofType</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.vo.CategoryChildrenVo\"</span> <span class=\"hljs-attr\">javaType</span>=<span class=\"hljs-string\">\"list\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenId\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"childrenId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">result</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenName\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"childrenName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">result</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">collection</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resultMap</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span></code></pre><h4 data-source=\"381\"><a id=\"4SQL_380\"></a>（4）编写SQL</h4>\n<p data-source=\"382\">完整的CategoryMapper.xml</p>\n<pre class=\"hljs\" data-source=\"384\"><code><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.db.dao.CategoryMapper\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 自定义返回数据类型模板 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resultMap</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"categoryMap\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.vo.CategoryParentVo\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"parentId\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"parentId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">result</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"parentName\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"parentName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">result</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">collection</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenCategory\"</span> <span class=\"hljs-attr\">ofType</span>=<span class=\"hljs-string\">\"com.xiaoyuan.back.vo.CategoryChildrenVo\"</span> <span class=\"hljs-attr\">javaType</span>=<span class=\"hljs-string\">\"list\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenId\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"childrenId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">result</span> <span class=\"hljs-attr\">property</span>=<span class=\"hljs-string\">\"childrenName\"</span> <span class=\"hljs-attr\">column</span>=<span class=\"hljs-string\">\"childrenName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">result</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">collection</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resultMap</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--\n     查询所有分类的目录结构\n     父级分类 ==&gt;&gt; 子分类\n     --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"findCategoryList\"</span> <span class=\"hljs-attr\">resultMap</span>=<span class=\"hljs-string\">\"categoryMap\"</span>&gt;</span>\n        select x.id as parentId, x.name as parentName, y.id as childrenId ,y.name as childrenName\n        from xy_category x\n        left join xy_category as y on y.parent_id = x.id\n        where x.parent_id = 0\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!--\n    通过某个父级分类的ID查询该父级的所有子分类\n    父级分类 ==&gt;&gt; 子分类\n    --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"getCategoryById\"</span> <span class=\"hljs-attr\">parameterType</span>=<span class=\"hljs-string\">\"int\"</span> <span class=\"hljs-attr\">resultMap</span>=<span class=\"hljs-string\">\"categoryMap\"</span>&gt;</span>\n        select x.id as parentId, x.name as parentName, y.id as childrenId ,y.name as childrenName\n        from xy_category x\n        left join xy_category as y on y.parent_id = x.id\n        where x.id = #{id}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span></code></pre><h2 data-source=\"421\"><a id=\"Swagger_420\"></a>八、Swagger接口测试</h2>\n<p data-source=\"422\">我这个项目整合了 <code>Swagger</code> 进行接口测试，网上很多整合的教程，只需要加一个配置类就搞定了，一分钟就行，我这里附上吧</p>\n<p data-source=\"424\"><strong>依赖</strong></p>\n<pre class=\"hljs\" data-source=\"425\"><code><span class=\"hljs-comment\">&lt;!-- Swagger --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.springfox<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.7.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.springfox<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.7.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><pre class=\"hljs\" data-source=\"439\"><code><span class=\"hljs-comment\">/**\n * FileName:    SwaggerConfig\n * Author:      小袁\n * Date:        2022/3/11 19:09\n * Description:\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableSwagger</span>2\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwaggerConfig</span> </span>{\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">webApiConfig</span><span class=\"hljs-params\">()</span></span>{\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2)\n                .groupName(<span class=\"hljs-string\">\"webApi\"</span>)\n                .apiInfo(webApiInfo())\n                .select()\n                .paths(Predicates.not(PathSelectors.regex(<span class=\"hljs-string\">\"/admin/.*\"</span>)))\n                .paths(Predicates.not(PathSelectors.regex(<span class=\"hljs-string\">\"/error.*\"</span>)))\n                .build();\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ApiInfo <span class=\"hljs-title\">webApiInfo</span><span class=\"hljs-params\">()</span></span>{\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ApiInfoBuilder()\n                .title(<span class=\"hljs-string\">\"Swagger接口测试\"</span>)\n                .description(<span class=\"hljs-string\">\"小袁同学\"</span>)\n                .version(<span class=\"hljs-string\">\"1.0\"</span>)\n                .contact(<span class=\"hljs-keyword\">new</span> Contact(<span class=\"hljs-string\">\"Helen\"</span>, <span class=\"hljs-string\">\"http://www.baidu.com\"</span>, <span class=\"hljs-string\">\"1971788445@qq.com\"</span>))\n                .build();\n    }\n}</code></pre><p data-source=\"474\"><strong>打开网页进行测试</strong></p>\n<p data-source=\"476\"><img src=\"https://img-blog.csdnimg.cn/ba674476cd654232ae0596c938e066c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p data-source=\"478\">执行查询所有分类的接口，测试结果如下，ok完美获取数据</p>\n<p data-source=\"480\"><img src=\"https://img-blog.csdnimg.cn/bfc2f1c508d64837a0ce56fcea17d490.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p data-source=\"482\"><img src=\"https://img-blog.csdnimg.cn/06e5b3de565247369562e09e47dc44d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p data-source=\"484\">或者直接在浏览器访问请求路径测试</p>\n<p data-source=\"486\"><img src=\"https://img-blog.csdnimg.cn/ce54cf9040154ba39306b5f8a7401972.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWXVhbi1Qcm9ncmFtbWVy,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<blockquote data-source=\"490\"><ul data-source=\"489\"><li><p data-source=\"489\"><strong>都看到这里啦，点点赞呀😋</strong></li>\n<li><p data-source=\"490\"><strong>感谢阅读😘</strong></li>\n</ul>\n</blockquote>\n');
INSERT INTO `xy_article_content` VALUES (1524060274548555778, 1524060274527584257, '\n\n#### 清空所有项目所有依赖\n第一步\n```\nnpm install rimraf -g\n```\n第二步\n```\nrimraf node_modules\n```\nnode_modules下的就全部删除了', '<h4 data-source=\"3\"><a id=\"_2\"></a>清空所有项目所有依赖</h4>\n<p data-source=\"4\">第一步</p>\n<pre class=\"hljs\" data-source=\"5\"><code>npm install rimraf -g</code></pre><p data-source=\"8\">第二步</p>\n<pre class=\"hljs\" data-source=\"9\"><code>rimraf node_modules</code></pre><p data-source=\"12\">node_modules下的就全部删除了</p>\n');
INSERT INTO `xy_article_content` VALUES (1524061897538682883, 1524061897538682881, '\n#### Docker的安装\n##### 一、介绍\n\n#### Docker 安装tomcat\n\n#### Docker 安装java8\n\n#### Docker 安装mysql8.0\n\n#### Docker 安装redis\n\n#### Docker 安装nginx', '<h4 data-source=\"2\"><a id=\"Docker_1\"></a>Docker的安装</h4>\n<h5 data-source=\"3\"><a id=\"_2\"></a>一、介绍</h5>\n<h4 data-source=\"5\"><a id=\"Docker_tomcat_4\"></a>Docker 安装tomcat</h4>\n<h4 data-source=\"7\"><a id=\"Docker_java8_6\"></a>Docker 安装java8</h4>\n<h4 data-source=\"9\"><a id=\"Docker_mysql80_8\"></a>Docker 安装mysql8.0</h4>\n<h4 data-source=\"11\"><a id=\"Docker_redis_10\"></a>Docker 安装redis</h4>\n<h4 data-source=\"13\"><a id=\"Docker_nginx_12\"></a>Docker 安装nginx</h4>\n');
INSERT INTO `xy_article_content` VALUES (1524415450874658819, 1524415450874658817, '\n##### 匹配邮箱\n```\n^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$\n```\n##### 匹配手机号码\n```\n^[1][3,4,5,7,8][0-9]{9}$\n```\n##### 匹配5-20个只能包含数字和字母，且最少1个字母+1个数字\n```\n^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{5,20}$\n```\n##### 只能包含数字和字母，且最少有1个字母\n```\n(?=.*[a-zA-Z])[a-zA-Z0-9]{5,20}\n```\n##### 是否包含中文\n```\n.*[\\u4e00-\\u9fa5]+.*$\n```', '<h5 data-source=\"2\"><a id=\"_1\"></a>匹配邮箱</h5>\n<pre class=\"hljs\" data-source=\"3\"><code>^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$</code></pre><h5 data-source=\"6\"><a id=\"_5\"></a>匹配手机号码</h5>\n<pre class=\"hljs\" data-source=\"7\"><code>^[1][3,4,5,7,8][0-9]{9}$</code></pre><h5 data-source=\"10\"><a id=\"52011_9\"></a>匹配5-20个只能包含数字和字母，且最少1个字母+1个数字</h5>\n<pre class=\"hljs\" data-source=\"11\"><code>^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{5,20}$</code></pre><h5 data-source=\"14\"><a id=\"1_13\"></a>只能包含数字和字母，且最少有1个字母</h5>\n<pre class=\"hljs\" data-source=\"15\"><code>(?=.*[a-zA-Z])[a-zA-Z0-9]{5,20}</code></pre><h5 data-source=\"18\"><a id=\"_17\"></a>是否包含中文</h5>\n<pre class=\"hljs\" data-source=\"19\"><code>.*[\\u4e00-\\u9fa5]+.*$</code></pre>');
INSERT INTO `xy_article_content` VALUES (1526500138804162564, 1526500138804162562, '>- 🚀 **注重版权，转载请注明原作者和原文链接**\n>- 🥭 **作者：小袁同学**\n>- 🍉 **进来的小伙伴点点赞呀**\n\n\n\ndemo地址预览：[http:/xiaoyuan-boke.com/user-manager](http:/xiaoyuan-boke.com/user-manager)\n\n花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源，Gitee开源地址：[https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master](https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master)\n\nGitee上开源的代码跟本次的案例的代码有些区别，本次案例稍微改了一点点，不过不影响Gitee上的项目运行，大致效果如下，功能可以访问demo地址测试哦\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b7021bbad66a4a5e85369ab78c1bef48.png#pic_center)\n\n## 前言\n#### 开发环境\n开发工具就不多介绍啦，就IDEA做后端，VSCode做前端，用其他的也都可以\n#### 技术\n本次后端用到的技术呢： 主要就两个，SpringBoot + MyBatisPlus\n\n 前端的技术用到的技术： Vue，结合脚手架以及element ui框架开发前端\n\n## 表设计\n既然是用户管理嘛，肯定有用户表，我们先来设计表结构\n\n> 这里说明一点，这次案例是新手教程，着重讲解功能的实现，所以用户信息参数方面就没有那么严格的校验，一般像号码这种字段肯定是设置为 char(11) 并且后端要校验的\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/cb6da539ffc347ee8369e42bbe4f9cbc.png)\n## 创建Maven工程\n创建一个空的Maven项目，大家应该都会了吧，还不会的小伙伴看之前的其他项目教程哦（我个人习惯创建maven工程，你喜欢直接创建springboot项目也可以，）\n\n我这里创建好了一个 **user-manager**的maven项目，创建好项目，点击右下角选择自动导入，没有弹出来也没关系\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a0a95463dce24782bb03826fdd8dc60f.png)\n#### 引入依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/32a9c57eea4d47559e2e250a7033ed1b.png)\n```xml\n	<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.1.RELEASE</version>\n        <relativePath/>\n    </parent>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <!-- MyBatis-Plus依赖 -->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.5.0</version>\n        </dependency>\n        <!-- 数据库驱动 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <!-- Web启动依赖 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <!-- SpringBoot测试依赖 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- Lombok -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- 处理JSON的 -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.76</version>\n        </dependency>\n    </dependencies>\n```\n#### 基本配置\n创建 com.xiaoyuan.usermanager 目录，新建一个启动类 UserManagerApplication\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b7ed2049824446808e61ba47b5117bce.png)\n```java\n@SpringBootApplication\npublic class UserManagerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(UserManagerApplication.class, args);\n    }\n}\n```\n在 resources 资源目录下新建 **application.yml** 配置文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/37823274397e499298a57fd8dff2a664.png)\n> 图片有误，少了时间格式转换三行代码，看下面\n\n```xml\nserver:\n  # 端口\n  port: 8081\n\nspring:\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:///l_user?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8\n    username: xiaoyuan\n    password: root\n  # 时间格式转换\n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss\n    \nmybatis-plus:\n  # mapper文件映射路径\n  mapper-locations: classpath*:mapper/*.xml\n  configuration:\n    # 打印SQL语句\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n## db层\n#### entity实体类\n新建 **db** 包，在 **db** 包下新建 **entity** 和 **mapper** 两个包，在 **entity** 包下新建一个 **User** 类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/08884158f41a4b36a1a931bbddedc2f4.png)\n> 注意一下，图片里 **describe** 有个注解忘记加上了，以下面代码为准\n```java\n@Data\npublic class User {\n\n    // 主键ID\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    // 用户名\n    private String username;\n\n    // 昵称\n    private String nickname;\n\n    // 密码\n    private String password;\n\n    // 号码\n    private String phone;\n\n    // 性别\n    private Character sex;\n\n    // 描述\n    @TableField(value = \"`describe`\") // describe属于数据库关键字，加上``区分\n    private String describe;\n\n    // 创建时间\n    @TableField(fill = FieldFill.INSERT) // insert操作时自动注入时间\n    private Date gmtCreate;\n}\n```\n#### mapper数据访问层\n在 **mapper** 包下新建一个 **UserMapper**，继承MyBatisPlus的 **BaseMapper** 类，作为DAO层操作数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b7fcd56ee42f44bf91cd856abd6a40cb.png)\n## MyBaitsPlus配置\n> 这里创建的两个包都与db包同级目录\n#### config配置类\n创建一个**config**包，新建一个**MyBatisPlusConfig** 类\n\n```java\n@Configuration\npublic class MyBatisPlusConfig {\n\n    /* 分页插件 */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        // 开启\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return interceptor;\n    }\n}\n```\n#### handler处理\n新建一个 **handler** 包，包下新建一个 **MyMetaObjectHandler** 类，实现 **MetaObjectHandler** 类，改类有两个方法，一个insert..在向数据库插入数据的时候，会自动插入我们设置的值\n\n```java\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    \n    /**\n     * 新增数据执行\n     * \n     * insert插入数据到数据库操作时执行\n     */\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        // 配置初始创建时间\n        this.setFieldValByName(\"gmtCreate\", new Date(), metaObject);\n    }\n\n    /**\n     * 修改数据执行\n     * \n     * update修改数据库数据操作时执行\n     */\n    @Override\n    public void updateFill(MetaObject metaObject) {\n    }\n}\n```\n> 这里的 **this.setFi...** 第一个参数对应的是User实体类的名字，不是表中的字段名，第二个参数的默认值\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/28f342703afd474f816adea3531ae248.png)\n## Vo对象\n新建一个 **vo** 包，用于和前端交互数据的类\n#### 统一结果返回类\n**vo** 包下新建一个 **R** 类，作为我们统一返回给前端数据的类，\n\n```java\n@Data\npublic class R {\n\n    private Boolean success;\n\n    private Integer code;\n\n    private String message;\n\n    private Map<String, Object> data = new HashMap<>();\n\n    // 把构造方法私有化\n    private R() {}\n\n    // 成功静态方法\n    public static R ok() {\n        R r = new R();\n        r.setSuccess(true);\n        r.setCode(200);\n        r.setMessage(\"成功\");\n        return r;\n    }\n\n    // 失败静态方法\n    public static R error() {\n        R r = new R();\n        r.setSuccess(false);\n        r.setCode(201);\n        r.setMessage(\"失败\");\n        return r;\n    }\n\n    public R success(Boolean success){\n        this.setSuccess(success);\n        return this;\n    }\n\n    public R message(String message){\n        this.setMessage(message);\n        return this;\n    }\n\n    public R code(Integer code){\n        this.setCode(code);\n        return this;\n    }\n\n    public R data(String key, Object value){\n        this.data.put(key, value);\n        return this;\n    }\n}\n```\n**vo** 包下新建 **QueryParam** 类\n\n```java\n@Data\npublic class QueryParam {\n\n    // 用户名\n    private String username;\n\n    // 昵称\n    private String nickname;\n\n    // 号码\n    private String phone;\n\n    // 性别\n    private String sex;\n\n    // 创建时间\n    private String time;\n}\n```\n这里讲一下吧，这个类是用来干嘛的呢？我们在效果展示的时候，是不是在上面看到有5个筛选条件，这5个筛选条件参数刚好对应类中的5个属性，我们统一封装起来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6a836c6a99974e91b80f4473f9e300aa.png)\n## service业务层\n新建一个 **service** 包，包下新建一个 **UserService** 接口类，继承MyBatisPlus的 **IService** 类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/22f70e202a034b828a277671c99ec87e.png)\n**service** 包下新建 **impl** 包，新建一个 **UserServiceImpl** 实现类，继承MyBatisPlus的 **ServiceImpl** 类，实现我们自己的 **UserService** 类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a5f14da5315f42858c21dcb13a30e043.png)\n我们先在 **UserService** 接口类定义五个方法，接下来我们一一实现这五个功能\n\n```java\npublic interface UserService extends IService<User> {\n\n    /**\n     * 添加用户\n     * @param user\n     * @return\n     */\n    R insertUser(User user);\n\n    /**\n     * 删除单个用户\n     * @param id 用户编号\n     * @return\n     */\n    R deleteUser(Integer id);\n\n    /**\n     * 删除多个用户\n     * @param ids 用户编号集合\n     * @return\n     */\n    R deleteUserMore(List<Integer> ids);\n\n    /**\n     * 编辑用户\n     * @param user\n     * @return\n     */\n    R modifyUser(User user);\n\n    /**\n     * 分页查询用户列表\n     * @param index 当前页\n     * @param size 每页显示数量\n     * @param queryParam 筛选条件对象\n     * @return\n     */\n    R findUserList(Integer index, Integer size, QueryParam queryParam);\n\n	/**\n     * 查询单个用户详细信息\n     * @param id 用户编号\n     * @return\n     */\n    R getUserInfoById(Integer id);\n}\n```\n\n#### 添加用户\n**UserServiceImpl** 实现类里实现添加用户方法，这里只做了简单的非空判断，其他参数的非法性校验可以自己额外完善\n\n```java\n@Override\npublic R insertUser(User user) {\n	if (user == null) return R.error().message(\"参数错误\");\n\n    // 用户名\n	String username = user.getUsername();\n\n	// 构建条件对象, 查询是否已经存在用户名\n	QueryWrapper<User> wrapper = new QueryWrapper<>();\n	wrapper.select(\"id\");\n	wrapper.eq(\"username\", username);\n	wrapper.last(\"limit 1\");\n\n	// 查询判断, 如果查询出来有数据, 则不为null\n	if (this.baseMapper.selectOne(wrapper) != null) R.error().message(\"该用户名已存在\");\n\n	// 执行插入数据操作\n	return this.baseMapper.insert(user) == 0 ? R.error().message(\"添加用户失败\") : R.ok();\n}\n```\n#### 删除用户\n删除用户就比较简单啦，肯定有人会问，前端做了非空校验，后端怎么还要做参数校验校验呢？\n\n其实前后端都做是最好的，有绕过前端发送请求的，就比如我们自己测试接口时用的postman, apifox，后端多做一层校验，避免直接操作数据库，我这里也是比较简单的做了校验\n\n```java\n@Override\npublic R deleteUser(Integer id) {\n	if (id == null || id <= 0) return R.error().message(\"参数错误\");\n\n	return  this.baseMapper.deleteById(id) == 0 ? R.error().message(\"删除失败\") : R.ok();\n}\n```\n#### 一键删除多个用户\n删除多个用户也没难度，将多个用户的编号放到一个集合中，一次删除多个\n\n```java\n@Override\npublic R deleteUserMore(List<Integer> ids) {\n	if (ids.size() == 0) return R.error().message(\"参数错误\");\n\n	return this.baseMapper.deleteBatchIds(ids) != ids.size() ? R.error().message(\"删除失败\") : R.ok();\n}\n```\n#### 编辑用户\n这个也没什么难度，做个简单校验，然后根据ID更新用户信息（参数其他合法性校验可以自己额外做哦）\n\n```java\n@Override\n    public R modifyUser(User user) {\n        if (user == null || user.getId() == null || user.getId() <= 0) return R.error().message(\"参数错误\");\n        \n        return this.baseMapper.updateById(user) == 0 ? R.error().message(\"编辑用户失败\") : R.ok();\n    }\n```\n#### 获取单个用户信息\n先实现这个吧，这个也很简单，直接通过用户编号查询用户的信息返回即可\n\n```java\n@Override\npublic R getUserInfoById(Integer id) {\n	if (id == null || id <= 0) return R.error().message(\"参数错误\");\n        \n	return R.ok().data(\"userInfo\", this.baseMapper.selectById(id));\n}\n```\n#### 查询用户列表\n先创建编写SQL语句的文件，在 **resources** 下新建 **mapper** 包，包下新建 **UserMapper.xml** 文件![在这里插入图片描述](https://img-blog.csdnimg.cn/8d8463e7673f454f864b2aaba7a34be7.png)\n代码中的SQL语句不能包含注释，所以我在图片给出了每行的注释，代码中删掉了，对应看着\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- namespace路径根据自己而定 -->\n<mapper namespace=\"com.xiaoyuan.usermanager.db.mapper.UserMapper\">\n\n    <!-- 查询用户列表（带多条件） -->\n    <select id=\"findUserList\" resultType=\"com.xiaoyuan.usermanager.db.entity.User\">\n        select *\n        from user\n        <where>\n            1 = 1\n            <if test=\"queryParam != null\">\n                <if test=\"queryParam.username != null and queryParam.username != \'\'\">\n                    and username = #{queryParam.username}\n                </if>\n                <if test=\"queryParam.nickname != null and queryParam.nickname != \'\'\">\n                    and nickname like CONCAT(#{queryParam.nickname}, \'%\')\n                </if>\n                <if test=\"queryParam.phone != null and queryParam.phone != \'\'\">\n                    and phone = #{queryParam.phone}\n                </if>\n                <if test=\"queryParam.sex != null and queryParam.sex != \'\'\">\n                    and sex = #{queryParam.sex}\n                </if>\n                <if test=\"queryParam.time != null and queryParam.time != \'\'\">\n                    and DATE_FORMAT(gmt_create,\'%Y-%m-%d\') = #{queryParam.time}\n                </if>\n            </if>\n        </where>\n    </select>\n</mapper>\n```\n我们大致来分析一下上面的SQL语句，首先 select * from user这里没毛病吧，咋们是管理用户，所有信息都得要上，* 查询所有\n\n后面 **where** 里有个 **1 = 1** 作用是恒等式，为了防止没有做筛选条件时，**queryParam** 条件对象为 **null** 导致 **where** 里面没东西，执行SQL语句的时候就会出现 **where** 后面没加东西，就会抛出异常\n\n**CONCAT** 函数的作用是拼接，当然你直接用下面这样也行，推荐还是使用CONCAT，以后会遇到的，还有就是 **%** 只写右边就可以了，避免全表扫描，采用单模糊查询\n```xml\nand nickname like #{queryParam.nickname} \'%\'\n```\n**DATE_FORMAT** 函数作用是对时间进行格式化，`2022-05-06 11:17:36` 转换为 `2022-05-06`\n\nSQL语句写好了，更新一下我们的 **UserMapper** 类，映射到 **UserMapper.xml** 文件的SQL语句，函数名就是 **< select id=\"xxxx\">** 这里id的值\n\n```java\n@Repository\npublic interface UserMapper extends BaseMapper<User> {\n\n    /**\n     * 查询用户列表\n     * @param page 分页对象\n     * @param queryParam 筛选条件\n     * @return\n     */\n    IPage<User> findUserList(Page<User> page, QueryParam queryParam);\n}\n```\n\n最后就是在 **UserServiceImpl** 实现查询用户列表的方法\n\n```java\n@Override\npublic R findUserList(Integer index, Integer size, QueryParam queryParam) {\n	if (index == null || size == null || index <= 0 || size <= 0) {\n		return R.error().message(\"参数错误\");\n	}else if (size > 10) {\n		return R.error().message(\"一次最多10条数据\");\n	}\n\n	// 构建分页对象\n	Page<User> page = new Page<>(index, size);\n	// 查询\n	IPage<User> iPage = this.baseMapper.findUserList(page, queryParam);\n\n	// 回传两个数据, 一个 userList --> 用户数据列表, 一个 total -> 总页数\n	return R.ok().data(\"userList\", iPage.getRecords()).data(\"total\", iPage.getTotal());\n}\n```\n## controller控制层\n这里是最后一步了，处理接口，我们采用 **RESTful** 的风格，相同的路径处理不用的操作\n![在这里插入图片描述](https://img-blog.csdnimg.cn/aa2af00f1e68464eaa636b797c4e5d2c.png)\n```java\n@RestController\n@RequestMapping(\"/user\")\n@CrossOrigin\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    // 添加用户\n    @PostMapping(\"\")\n    public R insertUser(@RequestBody User user) {\n        return userService.insertUser(user);\n    }\n\n    // 删除单个用户\n    @DeleteMapping(\"{id}\")\n    public R deleteUser(@PathVariable(value = \"id\") Integer id) {\n        return userService.deleteUser(id);\n    }\n\n    // 删除多个用户\n    @DeleteMapping(\"\")\n    public R deleteUserMore(@RequestBody List<Integer> ids) {\n        return userService.deleteUserMore(ids);\n    }\n\n    // 编辑用户\n    @PutMapping(\"\")\n    public R modifyUser(@RequestBody User user) {\n        return userService.modifyUser(user);\n    }\n\n    // 查询用户列表\n    @PostMapping(\"{index}/{size}\")\n    public R findUserList(@PathVariable(value = \"index\") Integer index,\n                          @PathVariable(value = \"size\") Integer size,\n                          @RequestBody(required = false) QueryParam queryParam) {\n        return userService.findUserList(index, size, queryParam);\n    }\n\n    // 根据用户编号查询用户信息\n    @PostMapping(\"{id}\")\n    public R getUserInfo(@PathVariable(value = \"id\") Integer id) {\n        return userService.getUserInfoById(id);\n    }\n}\n```\n## 接口测试\n最后，在启动类加上两个注解，一个 **MapperScan** 扫描我们的 **mapper** 类，一个 **ComponentScan** 扫描我们的组件\n\n```java\n@SpringBootApplication\n@MapperScan(basePackages = {\"com.xiaoyuan.usermanager.db.mapper\"})\n@ComponentScan({\"com.xiaoyuan\"})\npublic class UserManagerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(UserManagerApplication.class, args);\n    }\n}\n```\n\nOK，到这里功能已经全部做好了，我们测试一下接口，运行启动类，我这里只展示部分接口的测试接口，全部接口我已经测试过，都没有问题了\n\n大家可以自己去测试每个接口，我用的时 **ApiFox** 工具，非常好用，还能一键导出接口文档，可以显示接口耗时，分组分项目分接口分环境，非常的方便\n\n**添加用户，成功插入数据**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/ef181f62f7a44521b6cb2a8e39cea973.png)\n当然，你可以在代码里面用测试，新建一个 **SpringBoot** 的测试类，测试业务层也可以的，如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/313a0960a59645f5a3791bdbd1c21e94.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/674501b267cb4c6baa0378276a143921.png)\n其他的就不一一放出来了，大伙自己去试试吧~\n## 扩展（拦截器，权限拦截）\n像管理这种一般都会有权限的，总不可能每个人都能访问自己的接口来增删改查用户吧？如何做到不给其他人访问自己的接口，判断别人是否有权限访问呢？\n\n下面我们简单来设计一下，理解大概过程\n\n首先，**usermanager** 主目录下创建两个包，一个 **interceptor** 拦截器，一个 **WebMVCConfig** MVC的配置类\n\n**interceptor** 包下新建一个 **PermissionInterceptor** 类，实现 **HandlerInterceptor** 类\n\n> 拦截器有三个阶段，preHandle -> postHandle -> afterCompletion，依次按顺序执行，只有前一个return返回true，才会执行下一个阶段方法，简单介绍三个阶段\n> - preHandle：controller执行目标方法之前执行，一般用于权限验证等操作\n> - postHandle：controller执行完目标方法返回（如调用service业务层的方法），在前端数据渲染之前执行，一般用于更改视图数据\n> - afterCompletion：整个接口访问执行完毕，前端数据渲染完成，执行此方法，一般用于资源释放等操作\n\n很明显，我们这个权限验证拦截就是在 **preHandle** 阶段去全性\n\n这个 `code` 呢就是我们自己定义的权限码，我这里只是随便敲了长长的一段，反正自己知道就好，你可以做加密处理，这里我简单模拟一下\n\n```java\n@Component\npublic class PermissionInterceptor implements HandlerInterceptor {\n\n    private static final String code = \"dwagfhwhgiawpfwabifpjwaidjwaidwiafihwigfhwaigwhaipgwaihiwahifhwdefef\";\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n		// 放行OPTIONS请求\n        if (HttpMethod.OPTIONS.matches(request.getMethod())) {\n            return true;\n        }\n\n        // 获取请求头里面的 Authentication 属性值\n        String authentication = request.getHeader(\"Authentication\");\n        // 两者相等 -> 通过放行, 两者不相等 -> 不通过不放行\n        if (code.equals(authentication)) {\n            // 放行\n            return true;\n        }else {\n            // 不放行, 回传没有权限\n            response.setContentType(\"text/html;charset=utf-8\");\n            response.getWriter().println(JSON.toJSONString(R.error().message(\"没有操作权限\")));\n            return false;\n        }\n    }\n}\n```\n\n**config** 包下新建一个 **WebMVCConfig** 类，实现 **WebMvcConfigurer** 类，设置拦截器\n\n```java\n@Configuration\npublic class WebMVCConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new PermissionInterceptor()) // 添加拦截器\n                .addPathPatterns(\"/user/**\"); // 选择拦截路径，拦截/user下的所有请求\n    }\n}\n```\n好的，我们接下来看看效果，当然，就不适合在代码用SpringBoot测试类啦，因为校验请求头\n\n我们采用接口测试工具，老样子，我使用的是ApiFox，你可以使用postman等其他工具\n\n首先我们继续运行一下之前写好的请求路径（没加**Authentication** 权限码），可以看到，我们访问的是查询用户列表接口，显示没有权限\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b0964317286d4be890e79d1f98aff956.png)\n接下来我们在 **header** 请求头加上我们的 **Authentication** 的权限码，同样的路径，测试一下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/cea03735c97940608c7336704e2fbbfe.png)\n是不是就成功访问到了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/7156a36f458b4c168613822879c04f88.png)\n我们随便改错一个字母，也成功显示没有权限，除非你的权限码被别人知道了，或者被破解了（设置的复杂一点再加密基本不可能被破），不然你的接口别人访问不了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/d875691b1d21441fb90fe0d972b9d58f.png)\n## 🌹 结束语\n好了，整篇的教程呢到这也就结束，整篇教程即为原创一字一字手敲，也花了心思想怎么写怎么设计才能更好的直观简洁展示给大家，让大家能看懂\n\n最后，关于教程还有什么不懂的可以评论区留言，我一定会回复的，或者有什么更好的建议和想法也可以在评论区留言，看到好的我会一一采纳，感谢大家的支持\n\n再一次附上Gitee开源地址：[https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master](https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master) 不用大伙翻上去复制了\n\n> - **都看到这里啦，点点赞呀 😋**\n> - **感谢阅读 😘**\n', '<blockquote data-source=\"3\"><ul data-source=\"1\"><li><p data-source=\"1\">🚀 <strong>注重版权，转载请注明原作者和原文链接</strong></li>\n<li><p data-source=\"2\">🥭 <strong>作者：小袁同学</strong></li>\n<li><p data-source=\"3\">🍉 <strong>进来的小伙伴点点赞呀</strong></li>\n</ul>\n</blockquote>\n<p data-source=\"7\">demo地址预览（域名正在审核，将就ip访问）：<a href=\"http:/xiaoyuan-boke.com/user-manager\" target=\"_blank\">http:/xiaoyuan-boke.com/user-manager</a></p>\n<p data-source=\"9\">花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源，Gitee开源地址：<a href=\"https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master\" target=\"_blank\">https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master</a></p>\n<p data-source=\"11\">Gitee上开源的代码跟本次的案例的代码有些区别，本次案例稍微改了一点点，不过不影响Gitee上的项目运行，大致效果如下，功能可以访问demo地址测试哦</p>\n<p data-source=\"13\"><img src=\"https://img-blog.csdnimg.cn/b7021bbad66a4a5e85369ab78c1bef48.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"15\"><a id=\"_14\"></a>前言</h2>\n<h4 data-source=\"16\"><a id=\"_15\"></a>开发环境</h4>\n<p data-source=\"17\">开发工具就不多介绍啦，就IDEA做后端，VSCode做前端，用其他的也都可以</p>\n<h4 data-source=\"18\"><a id=\"_17\"></a>技术</h4>\n<p data-source=\"19\">本次后端用到的技术呢： 主要就两个，SpringBoot + MyBatisPlus</p>\n<p data-source=\"21\">前端的技术用到的技术： Vue，结合脚手架以及element ui框架开发前端</p>\n<h2 data-source=\"23\"><a id=\"_22\"></a>表设计</h2>\n<p data-source=\"24\">既然是用户管理嘛，肯定有用户表，我们先来设计表结构</p>\n<blockquote data-source=\"26\"><p data-source=\"26\">这里说明一点，这次案例是新手教程，着重讲解功能的实现，所以用户信息参数方面就没有那么严格的校验，一般像号码这种字段肯定是设置为 char(11) 并且后端要校验的</p>\n</blockquote>\n<p data-source=\"28\"><img src=\"https://img-blog.csdnimg.cn/cb6da539ffc347ee8369e42bbe4f9cbc.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"29\"><a id=\"Maven_28\"></a>创建Maven工程</h2>\n<p data-source=\"30\">创建一个空的Maven项目，大家应该都会了吧，还不会的小伙伴看之前的其他项目教程哦（我个人习惯创建maven工程，你喜欢直接创建springboot项目也可以，）</p>\n<p data-source=\"32\">我这里创建好了一个 <strong>user-manager</strong>的maven项目，创建好项目，点击右下角选择自动导入，没有弹出来也没关系\n<img src=\"https://img-blog.csdnimg.cn/a0a95463dce24782bb03826fdd8dc60f.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"34\"><a id=\"_33\"></a>引入依赖</h4>\n<p data-source=\"35\"><img src=\"https://img-blog.csdnimg.cn/32a9c57eea4d47559e2e250a7033ed1b.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"36\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.1.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- MyBatis-Plus依赖 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 数据库驱动 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>runtime<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Web启动依赖 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- SpringBoot测试依赖 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Lombok --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 处理JSON的 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.76<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span></code></pre><h4 data-source=\"85\"><a id=\"_84\"></a>基本配置</h4>\n<p data-source=\"86\">创建 com.xiaoyuan.usermanager 目录，新建一个启动类 UserManagerApplication\n<img src=\"https://img-blog.csdnimg.cn/b7ed2049824446808e61ba47b5117bce.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"88\"><code><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserManagerApplication</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        SpringApplication.run(UserManagerApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    }\n}</code></pre><p data-source=\"96\">在 resources 资源目录下新建 <strong>application.yml</strong> 配置文件\n<img src=\"https://img-blog.csdnimg.cn/37823274397e499298a57fd8dff2a664.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote data-source=\"98\"><p data-source=\"98\">图片有误，少了时间格式转换三行代码，看下面</p>\n</blockquote>\n<pre class=\"hljs\" data-source=\"100\"><code>server:\n  # 端口\n  port: 8081\n\nspring:\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:///l_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8\n    username: xiaoyuan\n    password: root\n  # 时间格式转换\n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss\n    \nmybatis-plus:\n  # mapper文件映射路径\n  mapper-locations: classpath*:mapper/*.xml\n  configuration:\n    # 打印SQL语句\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><h2 data-source=\"125\"><a id=\"db_124\"></a>db层</h2>\n<h4 data-source=\"126\"><a id=\"entity_125\"></a>entity实体类</h4>\n<p data-source=\"127\">新建 <strong>db</strong> 包，在 <strong>db</strong> 包下新建 <strong>entity</strong> 和 <strong>mapper</strong> 两个包，在 <strong>entity</strong> 包下新建一个 <strong>User</strong> 类\n<img src=\"https://img-blog.csdnimg.cn/08884158f41a4b36a1a931bbddedc2f4.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote data-source=\"129\"><p data-source=\"129\">注意一下，图片里 <strong>describe</strong> 有个注解忘记加上了，以下面代码为准</p>\n</blockquote>\n<pre class=\"hljs\" data-source=\"130\"><code><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n\n    <span class=\"hljs-comment\">// 主键ID</span>\n    <span class=\"hljs-meta\">@TableId</span>(value = <span class=\"hljs-string\">\"id\"</span>, type = IdType.AUTO)\n    <span class=\"hljs-keyword\">private</span> Integer id;\n\n    <span class=\"hljs-comment\">// 用户名</span>\n    <span class=\"hljs-keyword\">private</span> String username;\n\n    <span class=\"hljs-comment\">// 昵称</span>\n    <span class=\"hljs-keyword\">private</span> String nickname;\n\n    <span class=\"hljs-comment\">// 密码</span>\n    <span class=\"hljs-keyword\">private</span> String password;\n\n    <span class=\"hljs-comment\">// 号码</span>\n    <span class=\"hljs-keyword\">private</span> String phone;\n\n    <span class=\"hljs-comment\">// 性别</span>\n    <span class=\"hljs-keyword\">private</span> Character sex;\n\n    <span class=\"hljs-comment\">// 描述</span>\n    <span class=\"hljs-meta\">@TableField</span>(value = <span class=\"hljs-string\">\"`describe`\"</span>) <span class=\"hljs-comment\">// describe属于数据库关键字，加上``区分</span>\n    <span class=\"hljs-keyword\">private</span> String describe;\n\n    <span class=\"hljs-comment\">// 创建时间</span>\n    <span class=\"hljs-meta\">@TableField</span>(fill = FieldFill.INSERT) <span class=\"hljs-comment\">// insert操作时自动注入时间</span>\n    <span class=\"hljs-keyword\">private</span> Date gmtCreate;\n}</code></pre><h4 data-source=\"162\"><a id=\"mapper_161\"></a>mapper数据访问层</h4>\n<p data-source=\"163\">在 <strong>mapper</strong> 包下新建一个 <strong>UserMapper</strong>，继承MyBatisPlus的 <strong>BaseMapper</strong> 类，作为DAO层操作数据\n<img src=\"https://img-blog.csdnimg.cn/b7fcd56ee42f44bf91cd856abd6a40cb.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"165\"><a id=\"MyBaitsPlus_164\"></a>MyBaitsPlus配置</h2>\n<blockquote data-source=\"166\"><p data-source=\"166\">这里创建的两个包都与db包同级目录</p>\n</blockquote>\n<h4 data-source=\"167\"><a id=\"config_166\"></a>config配置类</h4>\n<p data-source=\"168\">创建一个<strong>config</strong>包，新建一个<strong>MyBatisPlusConfig</strong> 类</p>\n<pre class=\"hljs\" data-source=\"170\"><code><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyBatisPlusConfig</span> </span>{\n\n    <span class=\"hljs-comment\">/* 分页插件 */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MybatisPlusInterceptor <span class=\"hljs-title\">mybatisPlusInterceptor</span><span class=\"hljs-params\">()</span> </span>{\n        MybatisPlusInterceptor interceptor = <span class=\"hljs-keyword\">new</span> MybatisPlusInterceptor();\n        <span class=\"hljs-comment\">// 开启</span>\n        interceptor.addInnerInterceptor(<span class=\"hljs-keyword\">new</span> PaginationInnerInterceptor());\n        <span class=\"hljs-keyword\">return</span> interceptor;\n    }\n}</code></pre><h4 data-source=\"184\"><a id=\"handler_183\"></a>handler处理</h4>\n<p data-source=\"185\">新建一个 <strong>handler</strong> 包，包下新建一个 <strong>MyMetaObjectHandler</strong> 类，实现 <strong>MetaObjectHandler</strong> 类，改类有两个方法，一个insert…在向数据库插入数据的时候，会自动插入我们设置的值</p>\n<pre class=\"hljs\" data-source=\"187\"><code><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyMetaObjectHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">MetaObjectHandler</span> </span>{\n    \n    <span class=\"hljs-comment\">/**\n     * 新增数据执行\n     * \n     * insert插入数据到数据库操作时执行\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertFill</span><span class=\"hljs-params\">(MetaObject metaObject)</span> </span>{\n        <span class=\"hljs-comment\">// 配置初始创建时间</span>\n        <span class=\"hljs-keyword\">this</span>.setFieldValByName(<span class=\"hljs-string\">\"gmtCreate\"</span>, <span class=\"hljs-keyword\">new</span> Date(), metaObject);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 修改数据执行\n     * \n     * update修改数据库数据操作时执行\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateFill</span><span class=\"hljs-params\">(MetaObject metaObject)</span> </span>{\n    }\n}</code></pre><blockquote data-source=\"213\"><p data-source=\"212\">这里的 <strong>this.setFi…</strong> 第一个参数对应的是User实体类的名字，不是表中的字段名，第二个参数的默认值\n<img src=\"https://img-blog.csdnimg.cn/28f342703afd474f816adea3531ae248.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h2 data-source=\"214\"><a id=\"Vo_213\"></a>Vo对象</h2>\n<p data-source=\"215\">新建一个 <strong>vo</strong> 包，用于和前端交互数据的类</p>\n<h4 data-source=\"216\"><a id=\"_215\"></a>统一结果返回类</h4>\n<p data-source=\"217\"><strong>vo</strong> 包下新建一个 <strong>R</strong> 类，作为我们统一返回给前端数据的类，</p>\n<pre class=\"hljs\" data-source=\"219\"><code><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">R</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Boolean success;\n\n    <span class=\"hljs-keyword\">private</span> Integer code;\n\n    <span class=\"hljs-keyword\">private</span> String message;\n\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; data = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n\n    <span class=\"hljs-comment\">// 把构造方法私有化</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">R</span><span class=\"hljs-params\">()</span> </span>{}\n\n    <span class=\"hljs-comment\">// 成功静态方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> R <span class=\"hljs-title\">ok</span><span class=\"hljs-params\">()</span> </span>{\n        R r = <span class=\"hljs-keyword\">new</span> R();\n        r.setSuccess(<span class=\"hljs-keyword\">true</span>);\n        r.setCode(<span class=\"hljs-number\">200</span>);\n        r.setMessage(<span class=\"hljs-string\">\"成功\"</span>);\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n\n    <span class=\"hljs-comment\">// 失败静态方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> R <span class=\"hljs-title\">error</span><span class=\"hljs-params\">()</span> </span>{\n        R r = <span class=\"hljs-keyword\">new</span> R();\n        r.setSuccess(<span class=\"hljs-keyword\">false</span>);\n        r.setCode(<span class=\"hljs-number\">201</span>);\n        r.setMessage(<span class=\"hljs-string\">\"失败\"</span>);\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">success</span><span class=\"hljs-params\">(Boolean success)</span></span>{\n        <span class=\"hljs-keyword\">this</span>.setSuccess(success);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">message</span><span class=\"hljs-params\">(String message)</span></span>{\n        <span class=\"hljs-keyword\">this</span>.setMessage(message);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">code</span><span class=\"hljs-params\">(Integer code)</span></span>{\n        <span class=\"hljs-keyword\">this</span>.setCode(code);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">data</span><span class=\"hljs-params\">(String key, Object value)</span></span>{\n        <span class=\"hljs-keyword\">this</span>.data.put(key, value);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n}</code></pre><p data-source=\"273\"><strong>vo</strong> 包下新建 <strong>QueryParam</strong> 类</p>\n<pre class=\"hljs\" data-source=\"275\"><code><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryParam</span> </span>{\n\n    <span class=\"hljs-comment\">// 用户名</span>\n    <span class=\"hljs-keyword\">private</span> String username;\n\n    <span class=\"hljs-comment\">// 昵称</span>\n    <span class=\"hljs-keyword\">private</span> String nickname;\n\n    <span class=\"hljs-comment\">// 号码</span>\n    <span class=\"hljs-keyword\">private</span> String phone;\n\n    <span class=\"hljs-comment\">// 性别</span>\n    <span class=\"hljs-keyword\">private</span> String sex;\n\n    <span class=\"hljs-comment\">// 创建时间</span>\n    <span class=\"hljs-keyword\">private</span> String time;\n}</code></pre><p data-source=\"295\">这里讲一下吧，这个类是用来干嘛的呢？我们在效果展示的时候，是不是在上面看到有5个筛选条件，这5个筛选条件参数刚好对应类中的5个属性，我们统一封装起来\n<img src=\"https://img-blog.csdnimg.cn/6a836c6a99974e91b80f4473f9e300aa.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"297\"><a id=\"service_296\"></a>service业务层</h2>\n<p data-source=\"298\">新建一个 <strong>service</strong> 包，包下新建一个 <strong>UserService</strong> 接口类，继承MyBatisPlus的 <strong>IService</strong> 类\n<img src=\"https://img-blog.csdnimg.cn/22f70e202a034b828a277671c99ec87e.png\" alt=\"在这里插入图片描述\">\n<strong>service</strong> 包下新建 <strong>impl</strong> 包，新建一个 <strong>UserServiceImpl</strong> 实现类，继承MyBatisPlus的 <strong>ServiceImpl</strong> 类，实现我们自己的 <strong>UserService</strong> 类\n<img src=\"https://img-blog.csdnimg.cn/a5f14da5315f42858c21dcb13a30e043.png\" alt=\"在这里插入图片描述\">\n我们先在 <strong>UserService</strong> 接口类定义五个方法，接下来我们一一实现这五个功能</p>\n<pre class=\"hljs\" data-source=\"304\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">IService</span>&lt;<span class=\"hljs-title\">User</span>&gt; </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 添加用户\n     * <span class=\"hljs-doctag\">@param</span> user\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">insertUser</span><span class=\"hljs-params\">(User user)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 删除单个用户\n     * <span class=\"hljs-doctag\">@param</span> id 用户编号\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">deleteUser</span><span class=\"hljs-params\">(Integer id)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 删除多个用户\n     * <span class=\"hljs-doctag\">@param</span> ids 用户编号集合\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">deleteUserMore</span><span class=\"hljs-params\">(List&lt;Integer&gt; ids)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 编辑用户\n     * <span class=\"hljs-doctag\">@param</span> user\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">modifyUser</span><span class=\"hljs-params\">(User user)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * 分页查询用户列表\n     * <span class=\"hljs-doctag\">@param</span> index 当前页\n     * <span class=\"hljs-doctag\">@param</span> size 每页显示数量\n     * <span class=\"hljs-doctag\">@param</span> queryParam 筛选条件对象\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">findUserList</span><span class=\"hljs-params\">(Integer index, Integer size, QueryParam queryParam)</span></span>;\n\n	<span class=\"hljs-comment\">/**\n     * 查询单个用户详细信息\n     * <span class=\"hljs-doctag\">@param</span> id 用户编号\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">getUserInfoById</span><span class=\"hljs-params\">(Integer id)</span></span>;\n}</code></pre><h4 data-source=\"353\"><a id=\"_352\"></a>添加用户</h4>\n<p data-source=\"354\"><strong>UserServiceImpl</strong> 实现类里实现添加用户方法，这里只做了简单的非空判断，其他参数的非法性校验可以自己额外完善</p>\n<pre class=\"hljs\" data-source=\"356\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">insertUser</span><span class=\"hljs-params\">(User user)</span> </span>{\n	<span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n\n    <span class=\"hljs-comment\">// 用户名</span>\n	String username = user.getUsername();\n\n	<span class=\"hljs-comment\">// 构建条件对象, 查询是否已经存在用户名</span>\n	QueryWrapper&lt;User&gt; wrapper = <span class=\"hljs-keyword\">new</span> QueryWrapper&lt;&gt;();\n	wrapper.select(<span class=\"hljs-string\">\"id\"</span>);\n	wrapper.eq(<span class=\"hljs-string\">\"username\"</span>, username);\n	wrapper.last(<span class=\"hljs-string\">\"limit 1\"</span>);\n\n	<span class=\"hljs-comment\">// 查询判断, 如果查询出来有数据, 则不为null</span>\n	<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.baseMapper.selectOne(wrapper) != <span class=\"hljs-keyword\">null</span>) R.error().message(<span class=\"hljs-string\">\"该用户名已存在\"</span>);\n\n	<span class=\"hljs-comment\">// 执行插入数据操作</span>\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.baseMapper.insert(user) == <span class=\"hljs-number\">0</span> ? R.error().message(<span class=\"hljs-string\">\"添加用户失败\"</span>) : R.ok();\n}</code></pre><h4 data-source=\"377\"><a id=\"_376\"></a>删除用户</h4>\n<p data-source=\"378\">删除用户就比较简单啦，肯定有人会问，前端做了非空校验，后端怎么还要做参数校验校验呢？</p>\n<p data-source=\"380\">其实前后端都做是最好的，有绕过前端发送请求的，就比如我们自己测试接口时用的postman, apifox，后端多做一层校验，避免直接操作数据库，我这里也是比较简单的做了校验</p>\n<pre class=\"hljs\" data-source=\"382\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">deleteUser</span><span class=\"hljs-params\">(Integer id)</span> </span>{\n	<span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span> || id &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n\n	<span class=\"hljs-keyword\">return</span>  <span class=\"hljs-keyword\">this</span>.baseMapper.deleteById(id) == <span class=\"hljs-number\">0</span> ? R.error().message(<span class=\"hljs-string\">\"删除失败\"</span>) : R.ok();\n}</code></pre><h4 data-source=\"390\"><a id=\"_389\"></a>一键删除多个用户</h4>\n<p data-source=\"391\">删除多个用户也没难度，将多个用户的编号放到一个集合中，一次删除多个</p>\n<pre class=\"hljs\" data-source=\"393\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">deleteUserMore</span><span class=\"hljs-params\">(List&lt;Integer&gt; ids)</span> </span>{\n	<span class=\"hljs-keyword\">if</span> (ids.size() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.baseMapper.deleteBatchIds(ids) != ids.size() ? R.error().message(<span class=\"hljs-string\">\"删除失败\"</span>) : R.ok();\n}</code></pre><h4 data-source=\"401\"><a id=\"_400\"></a>编辑用户</h4>\n<p data-source=\"402\">这个也没什么难度，做个简单校验，然后根据ID更新用户信息（参数其他合法性校验可以自己额外做哦）</p>\n<pre class=\"hljs\" data-source=\"404\"><code><span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">modifyUser</span><span class=\"hljs-params\">(User user)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span> || user.getId() == <span class=\"hljs-keyword\">null</span> || user.getId() &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.baseMapper.updateById(user) == <span class=\"hljs-number\">0</span> ? R.error().message(<span class=\"hljs-string\">\"编辑用户失败\"</span>) : R.ok();\n    }</code></pre><h4 data-source=\"412\"><a id=\"_411\"></a>获取单个用户信息</h4>\n<p data-source=\"413\">先实现这个吧，这个也很简单，直接通过用户编号查询用户的信息返回即可</p>\n<pre class=\"hljs\" data-source=\"415\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">getUserInfoById</span><span class=\"hljs-params\">(Integer id)</span> </span>{\n	<span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span> || id &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n        \n	<span class=\"hljs-keyword\">return</span> R.ok().data(<span class=\"hljs-string\">\"userInfo\"</span>, <span class=\"hljs-keyword\">this</span>.baseMapper.selectById(id));\n}</code></pre><h4 data-source=\"423\"><a id=\"_422\"></a>查询用户列表</h4>\n<p data-source=\"424\">先创建编写SQL语句的文件，在 <strong>resources</strong> 下新建 <strong>mapper</strong> 包，包下新建 <strong>UserMapper.xml</strong> 文件<img src=\"https://img-blog.csdnimg.cn/8d8463e7673f454f864b2aaba7a34be7.png\" alt=\"在这里插入图片描述\">\n代码中的SQL语句不能包含注释，所以我在图片给出了每行的注释，代码中删掉了，对应看着</p>\n<pre class=\"hljs\" data-source=\"426\"><code><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- namespace路径根据自己而定 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">\"com.xiaoyuan.usermanager.db.mapper.UserMapper\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 查询用户列表（带多条件） --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"findUserList\"</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">\"com.xiaoyuan.usermanager.db.entity.User\"</span>&gt;</span>\n        select *\n        from user\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">where</span>&gt;</span>\n            1 = 1\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam != null\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam.username != null and queryParam.username != \'\'\"</span>&gt;</span>\n                    and username = #{queryParam.username}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam.nickname != null and queryParam.nickname != \'\'\"</span>&gt;</span>\n                    and nickname like CONCAT(#{queryParam.nickname}, \'%\')\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam.phone != null and queryParam.phone != \'\'\"</span>&gt;</span>\n                    and phone = #{queryParam.phone}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam.sex != null and queryParam.sex != \'\'\"</span>&gt;</span>\n                    and sex = #{queryParam.sex}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"queryParam.time != null and queryParam.time != \'\'\"</span>&gt;</span>\n                    and DATE_FORMAT(gmt_create,\'%Y-%m-%d\') = #{queryParam.time}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">where</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span></code></pre><p data-source=\"459\">我们大致来分析一下上面的SQL语句，首先 select * from user这里没毛病吧，咋们是管理用户，所有信息都得要上，* 查询所有</p>\n<p data-source=\"461\">后面 <strong>where</strong> 里有个 <strong>1 = 1</strong> 作用是恒等式，为了防止没有做筛选条件时，<strong>queryParam</strong> 条件对象为 <strong>null</strong> 导致 <strong>where</strong> 里面没东西，执行SQL语句的时候就会出现 <strong>where</strong> 后面没加东西，就会抛出异常</p>\n<p data-source=\"463\"><strong>CONCAT</strong> 函数的作用是拼接，当然你直接用下面这样也行，推荐还是使用CONCAT，以后会遇到的，还有就是 <strong>%</strong> 只写右边就可以了，避免全表扫描，采用单模糊查询</p>\n<pre class=\"hljs\" data-source=\"464\"><code>and nickname like #{queryParam.nickname} \'%\'</code></pre><p data-source=\"467\"><strong>DATE_FORMAT</strong> 函数作用是对时间进行格式化，<code>2022-05-06 11:17:36</code> 转换为 <code>2022-05-06</code></p>\n<p data-source=\"469\">SQL语句写好了，更新一下我们的 <strong>UserMapper</strong> 类，映射到 <strong>UserMapper.xml</strong> 文件的SQL语句，函数名就是 <strong>&lt; select id=“xxxx”&gt;</strong> 这里id的值</p>\n<pre class=\"hljs\" data-source=\"471\"><code><span class=\"hljs-meta\">@Repository</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseMapper</span>&lt;<span class=\"hljs-title\">User</span>&gt; </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 查询用户列表\n     * <span class=\"hljs-doctag\">@param</span> page 分页对象\n     * <span class=\"hljs-doctag\">@param</span> queryParam 筛选条件\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">IPage&lt;User&gt; <span class=\"hljs-title\">findUserList</span><span class=\"hljs-params\">(Page&lt;User&gt; page, QueryParam queryParam)</span></span>;\n}</code></pre><p data-source=\"485\">最后就是在 <strong>UserServiceImpl</strong> 实现查询用户列表的方法</p>\n<pre class=\"hljs\" data-source=\"487\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">findUserList</span><span class=\"hljs-params\">(Integer index, Integer size, QueryParam queryParam)</span> </span>{\n	<span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-keyword\">null</span> || size == <span class=\"hljs-keyword\">null</span> || index &lt;= <span class=\"hljs-number\">0</span> || size &lt;= <span class=\"hljs-number\">0</span>) {\n		<span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"参数错误\"</span>);\n	}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (size &gt; <span class=\"hljs-number\">10</span>) {\n		<span class=\"hljs-keyword\">return</span> R.error().message(<span class=\"hljs-string\">\"一次最多10条数据\"</span>);\n	}\n\n	<span class=\"hljs-comment\">// 构建分页对象</span>\n	Page&lt;User&gt; page = <span class=\"hljs-keyword\">new</span> Page&lt;&gt;(index, size);\n	<span class=\"hljs-comment\">// 查询</span>\n	IPage&lt;User&gt; iPage = <span class=\"hljs-keyword\">this</span>.baseMapper.findUserList(page, queryParam);\n\n	<span class=\"hljs-comment\">// 回传两个数据, 一个 userList --&gt; 用户数据列表, 一个 total -&gt; 总页数</span>\n	<span class=\"hljs-keyword\">return</span> R.ok().data(<span class=\"hljs-string\">\"userList\"</span>, iPage.getRecords()).data(<span class=\"hljs-string\">\"total\"</span>, iPage.getTotal());\n}</code></pre><h2 data-source=\"505\"><a id=\"controller_504\"></a>controller控制层</h2>\n<p data-source=\"506\">这里是最后一步了，处理接口，我们采用 <strong>RESTful</strong> 的风格，相同的路径处理不用的操作\n<img src=\"https://img-blog.csdnimg.cn/aa2af00f1e68464eaa636b797c4e5d2c.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"508\"><code><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/user\"</span>)\n<span class=\"hljs-meta\">@CrossOrigin</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserService userService;\n\n    <span class=\"hljs-comment\">// 添加用户</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">insertUser</span><span class=\"hljs-params\">(@RequestBody User user)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> userService.insertUser(user);\n    }\n\n    <span class=\"hljs-comment\">// 删除单个用户</span>\n    <span class=\"hljs-meta\">@DeleteMapping</span>(<span class=\"hljs-string\">\"{id}\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">deleteUser</span><span class=\"hljs-params\">(@PathVariable(value = <span class=\"hljs-string\">\"id\"</span>)</span> Integer id) </span>{\n        <span class=\"hljs-keyword\">return</span> userService.deleteUser(id);\n    }\n\n    <span class=\"hljs-comment\">// 删除多个用户</span>\n    <span class=\"hljs-meta\">@DeleteMapping</span>(<span class=\"hljs-string\">\"\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">deleteUserMore</span><span class=\"hljs-params\">(@RequestBody List&lt;Integer&gt; ids)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> userService.deleteUserMore(ids);\n    }\n\n    <span class=\"hljs-comment\">// 编辑用户</span>\n    <span class=\"hljs-meta\">@PutMapping</span>(<span class=\"hljs-string\">\"\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">modifyUser</span><span class=\"hljs-params\">(@RequestBody User user)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> userService.modifyUser(user);\n    }\n\n    <span class=\"hljs-comment\">// 查询用户列表</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"{index}/{size}\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">findUserList</span><span class=\"hljs-params\">(@PathVariable(value = <span class=\"hljs-string\">\"index\"</span>)</span> Integer index,\n                          @<span class=\"hljs-title\">PathVariable</span><span class=\"hljs-params\">(value = <span class=\"hljs-string\">\"size\"</span>)</span> Integer size,\n                          @<span class=\"hljs-title\">RequestBody</span><span class=\"hljs-params\">(required = <span class=\"hljs-keyword\">false</span>)</span> QueryParam queryParam) </span>{\n        <span class=\"hljs-keyword\">return</span> userService.findUserList(index, size, queryParam);\n    }\n\n    <span class=\"hljs-comment\">// 根据用户编号查询用户信息</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"{id}\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> R <span class=\"hljs-title\">getUserInfo</span><span class=\"hljs-params\">(@PathVariable(value = <span class=\"hljs-string\">\"id\"</span>)</span> Integer id) </span>{\n        <span class=\"hljs-keyword\">return</span> userService.getUserInfoById(id);\n    }\n}</code></pre><h2 data-source=\"556\"><a id=\"_555\"></a>接口测试</h2>\n<p data-source=\"557\">最后，在启动类加上两个注解，一个 <strong>MapperScan</strong> 扫描我们的 <strong>mapper</strong> 类，一个 <strong>ComponentScan</strong> 扫描我们的组件</p>\n<pre class=\"hljs\" data-source=\"559\"><code><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@MapperScan</span>(basePackages = {<span class=\"hljs-string\">\"com.xiaoyuan.usermanager.db.mapper\"</span>})\n<span class=\"hljs-meta\">@ComponentScan</span>({<span class=\"hljs-string\">\"com.xiaoyuan\"</span>})\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserManagerApplication</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        SpringApplication.run(UserManagerApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    }\n}</code></pre><p data-source=\"570\">OK，到这里功能已经全部做好了，我们测试一下接口，运行启动类，我这里只展示部分接口的测试接口，全部接口我已经测试过，都没有问题了</p>\n<p data-source=\"572\">大家可以自己去测试每个接口，我用的时 <strong>ApiFox</strong> 工具，非常好用，还能一键导出接口文档，可以显示接口耗时，分组分项目分接口分环境，非常的方便</p>\n<p data-source=\"574\"><strong>添加用户，成功插入数据</strong>\n<img src=\"https://img-blog.csdnimg.cn/ef181f62f7a44521b6cb2a8e39cea973.png\" alt=\"在这里插入图片描述\">\n当然，你可以在代码里面用测试，新建一个 <strong>SpringBoot</strong> 的测试类，测试业务层也可以的，如下\n<img src=\"https://img-blog.csdnimg.cn/313a0960a59645f5a3791bdbd1c21e94.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/674501b267cb4c6baa0378276a143921.png\" alt=\"在这里插入图片描述\">\n其他的就不一一放出来了，大伙自己去试试吧~</p>\n<h2 data-source=\"580\"><a id=\"_579\"></a>扩展（拦截器，权限拦截）</h2>\n<p data-source=\"581\">像管理这种一般都会有权限的，总不可能每个人都能访问自己的接口来增删改查用户吧？如何做到不给其他人访问自己的接口，判断别人是否有权限访问呢？</p>\n<p data-source=\"583\">下面我们简单来设计一下，理解大概过程</p>\n<p data-source=\"585\">首先，<strong>usermanager</strong> 主目录下创建两个包，一个 <strong>interceptor</strong> 拦截器，一个 <strong>WebMVCConfig</strong> MVC的配置类</p>\n<p data-source=\"587\"><strong>interceptor</strong> 包下新建一个 <strong>PermissionInterceptor</strong> 类，实现 <strong>HandlerInterceptor</strong> 类</p>\n<blockquote data-source=\"592\"><p data-source=\"589\">拦截器有三个阶段，preHandle -&gt; postHandle -&gt; afterCompletion，依次按顺序执行，只有前一个return返回true，才会执行下一个阶段方法，简单介绍三个阶段</p>\n<ul data-source=\"590\"><li><p data-source=\"590\">preHandle：controller执行目标方法之前执行，一般用于权限验证等操作</li>\n<li><p data-source=\"591\">postHandle：controller执行完目标方法返回（如调用service业务层的方法），在前端数据渲染之前执行，一般用于更改视图数据</li>\n<li><p data-source=\"592\">afterCompletion：整个接口访问执行完毕，前端数据渲染完成，执行此方法，一般用于资源释放等操作</li>\n</ul>\n</blockquote>\n<p data-source=\"594\">很明显，我们这个权限验证拦截就是在 <strong>preHandle</strong> 阶段去全性</p>\n<p data-source=\"596\">这个 <code>code</code> 呢就是我们自己定义的权限码，我这里只是随便敲了长长的一段，反正自己知道就好，你可以做加密处理，这里我简单模拟一下</p>\n<pre class=\"hljs\" data-source=\"598\"><code><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PermissionInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HandlerInterceptor</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String code = <span class=\"hljs-string\">\"dwagfhwhgiawpfwabifpjwaidjwaidwiafihwigfhwaigwhaipgwaihiwahifhwdefef\"</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n		<span class=\"hljs-comment\">// 放行OPTIONS请求</span>\n        <span class=\"hljs-keyword\">if</span> (HttpMethod.OPTIONS.matches(request.getMethod())) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">// 获取请求头里面的 Authentication 属性值</span>\n        String authentication = request.getHeader(<span class=\"hljs-string\">\"Authentication\"</span>);\n        <span class=\"hljs-comment\">// 两者相等 -&gt; 通过放行, 两者不相等 -&gt; 不通过不放行</span>\n        <span class=\"hljs-keyword\">if</span> (code.equals(authentication)) {\n            <span class=\"hljs-comment\">// 放行</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 不放行, 回传没有权限</span>\n            response.setContentType(<span class=\"hljs-string\">\"text/html;charset=utf-8\"</span>);\n            response.getWriter().println(JSON.toJSONString(R.error().message(<span class=\"hljs-string\">\"没有操作权限\"</span>)));\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n    }\n}</code></pre><p data-source=\"627\"><strong>config</strong> 包下新建一个 <strong>WebMVCConfig</strong> 类，实现 <strong>WebMvcConfigurer</strong> 类，设置拦截器</p>\n<pre class=\"hljs\" data-source=\"629\"><code><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebMVCConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">WebMvcConfigurer</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>{\n        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> PermissionInterceptor()) <span class=\"hljs-comment\">// 添加拦截器</span>\n                .addPathPatterns(<span class=\"hljs-string\">\"/user/**\"</span>); <span class=\"hljs-comment\">// 选择拦截路径，拦截/user下的所有请求</span>\n    }\n}</code></pre><p data-source=\"640\">好的，我们接下来看看效果，当然，就不适合在代码用SpringBoot测试类啦，因为校验请求头</p>\n<p data-source=\"642\">我们采用接口测试工具，老样子，我使用的是ApiFox，你可以使用postman等其他工具</p>\n<p data-source=\"644\">首先我们继续运行一下之前写好的请求路径（没加<strong>Authentication</strong> 权限码），可以看到，我们访问的是查询用户列表接口，显示没有权限\n<img src=\"https://img-blog.csdnimg.cn/b0964317286d4be890e79d1f98aff956.png\" alt=\"在这里插入图片描述\">\n接下来我们在 <strong>header</strong> 请求头加上我们的 <strong>Authentication</strong> 的权限码，同样的路径，测试一下\n<img src=\"https://img-blog.csdnimg.cn/cea03735c97940608c7336704e2fbbfe.png\" alt=\"在这里插入图片描述\">\n是不是就成功访问到了\n<img src=\"https://img-blog.csdnimg.cn/7156a36f458b4c168613822879c04f88.png\" alt=\"在这里插入图片描述\">\n我们随便改错一个字母，也成功显示没有权限，除非你的权限码被别人知道了，或者被破解了（设置的复杂一点再加密基本不可能被破），不然你的接口别人访问不了\n<img src=\"https://img-blog.csdnimg.cn/d875691b1d21441fb90fe0d972b9d58f.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"652\"><a id=\"__651\"></a>🌹 结束语</h2>\n<p data-source=\"653\">好了，整篇的教程呢到这也就结束，整篇教程即为原创一字一字手敲，也花了心思想怎么写怎么设计才能更好的直观简洁展示给大家，让大家能看懂</p>\n<p data-source=\"655\">最后，关于教程还有什么不懂的可以评论区留言，我一定会回复的，或者有什么更好的建议和想法也可以在评论区留言，看到好的我会一一采纳，感谢大家的支持</p>\n<p data-source=\"657\">再一次附上Gitee开源地址：<a href=\"https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master\" target=\"_blank\">https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master</a> 不用大伙翻上去复制了</p>\n<blockquote data-source=\"660\"><ul data-source=\"659\"><li><p data-source=\"659\"><strong>都看到这里啦，点点赞呀 😋</strong></li>\n<li><p data-source=\"660\"><strong>感谢阅读 😘</strong></li>\n</ul>\n</blockquote>\n');
INSERT INTO `xy_article_content` VALUES (1526501462362935297, 1526501462320992257, '>- 🚀 **注重版权，转载请注明原作者和原文链接**\n>- 🥭 **作者：小袁同学**\n>- 🍎 **主页：[https://www.xiaoyuan-boke.com](https://www.xiaoyuan-boke.com)**\n>- 🍉 **进来的小伙伴点点赞呀**\n\n\ndemo地址预览：[http://xiaoyuan-boke.com/user-manager](http://xiaoyuan-boke.com/user-manager)\n\n🚀 花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源，Gitee开源地址：[https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master](https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master)\n\n> Gitee上开源的代码跟本次的案例的代码有些区别，本次案例稍微改了一点点，不过不影响Gitee上的项目运行，大致效果如下，功能可以访问demo地址测试哦\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b7021bbad66a4a5e85369ab78c1bef48.png#pic_center#pic_center)\n话不多说，下面跟着我一步一步来吧~ \n\n## 前言\n说实话，我个人觉得像这种的简单的crud项目前端比后端要麻烦多，也做的比后端慢\n#### 开发前准备\n - VSCode开发工具，很方便，推荐使用，你用其他前端编译器也没有问题（我之前出过安装教程）\n - Vue环境的搭建，一个 **node.js**（我之前也出过安装教程，可以翻翻），一个 **vue-cli** 脚手架（网上很多教程），只要 **node.js** 成功安装配置没问题，脚手架安装很快的\n - 打开我们的 **element ui** 网站，地址：[https://element.eleme.cn/#/zh-CN/component/installation](https://element.eleme.cn/#/zh-CN/component/installation)\n- 打开 **axios** 官方网站，地址：[http://www.axios-js.com/docs/](http://www.axios-js.com/docs/)\n\n## 🍒 脚手架创建项目，安装依赖\n> 提一嘴，VSCode记得要安装Vue环境的插件，这个百度也有很多教程，就不介绍啦，还有就是要有一定Vue基础知识，至少了解vue的语法\n#### 创建项目\n\n首先以管理员模式打开我们的 **VSCode** 工具，选择文件夹位置（待会创建项目的地方）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2d20081677134c539163aea064469a91.png)\n在下面终端输命令 `vue create user-manager-vue` 后面那个是项目名称，下面没有终端控制台的可以点击上面新建终端\n![在这里插入图片描述](https://img-blog.csdnimg.cn/80be2665294d4d1c804eccf92fff6b3a.png)\n选择 **default** 默认配置就好，我这里创建过做过配置，有自己单独的配置选项，你们第一次创建的选择默认的就行，然后等待创建完成\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2602caf5fc634322904b5e2e2faff68d.png)\n如图，一个脚手架的项目就创建好啦\n![在这里插入图片描述](https://img-blog.csdnimg.cn/341473ac1aa849cdad13a82685322685.png)\n我们什么都不做，先运行看看默认项目的样子吧，输入命令 `cd user-manager-vue` 跳转到项目目录下，接着输入 `npm run serve` 启动项目\n\n显示如图，则启动成功，打开网站看一下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6f6a30413fb748b5aa5a61913eedd27b.png)\n效果如图，这是脚手架创建项目的默认模板\n![在这里插入图片描述](https://img-blog.csdnimg.cn/850faca7a5224d1785c28b3fd31a5074.png)\n#### 安装依赖\n回到编译器，ctrl c 结束运行，输入命令 **npm i element-ui -S** 安装element ui，接着输入命令 **npm install axios** 安装axios，用于向后端发送请求\n\n## 🍅 初始配置，封装axios请求\n修改main.js，加上下面五行代码，全局使用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/411333205f9e4fe690aa1ffff47637ed.png)\n\n```javascript\nimport ElementUI from \'element-ui\';\nimport axios from \'axios\'\nimport \'element-ui/lib/theme-chalk/index.css\';\n\nVue.use(ElementUI);\nVue.prototype.$axios = axios\n```\n#### 封装请求\n在 **src** 目录下新建 **utils** 文件夹，文件夹下新建 **request.js** 文件，代码内容我已经写有注释\n![在这里插入图片描述](https://img-blog.csdnimg.cn/3073387f8e6944aea5fe757e1b7b7c2a.png)\n\n\n```javascript\nimport axios from \'axios\'\nimport { Message } from \'element-ui\'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: \"http://localhost:8081\", // 后端接口地址前缀（端口和后端配置文件一致）\n  timeout: 5000 // 请求超时时间\n})\n\n// request拦截器\nservice.interceptors.request.use(\n  config => {\n    // 请求头携带我们的权限码，和后端一致就行\n    config.headers[\'Authentication\'] = \"dwagfhwhgiawpfwabifpjwaidjwaidwiafihwigfhwaigwhaipgwaihiwahifhwdefef\"\n    return config\n  },\n  error => {\n    // Do something with request error\n    console.log(error) // for debug\n    Promise.reject(error)\n  }\n)\n\n// response 拦截器\nservice.interceptors.response.use(\n  response => {\n    /**\n     * code为非200是抛错 可结合自己业务进行修改\n     */\n    const res = response.data\n    if (res.code !== 200) {\n      Message({\n        message: res.message,\n        type: \'error\',\n        duration: 5 * 1000\n      })\n      /**\n       * 可以自定义返回状态码，处理不同的结果\n       */\n      return Promise.reject(\'error\')\n    } else {\n      return response.data\n    }\n  },\n  error => {\n    console.log(\'err\' + error) // for debug\n    Message({\n      message: error.message,\n      type: \'error\',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n```\n\n#### 修改app.vue\n修改成下面这样\n\n```html\n<template>\n  <div id=\"app\">\n    <router-view></router-view>\n  </div>\n</template>\n\n<style>\n.el-header {\n  background-color: #b3c0d1;\n  color: #333;\n  line-height: 60px;\n}\n\n.el-aside {\n  color: #333;\n}\n</style>\n```\n\n#### 修改views文件夹\n删除原来的 **Home.vue** 和 **About.vue** ，新建 **index.vue**，作为左侧导航栏组件（看demo地址效果）\n\n再分别新建三个页面 **userList.vue**、**addUser**、**userInfoList.vue**，三个页面分别对应左侧导航栏展开的三个页面\n\n接着在 **index.vue** 添加代码，\n\n```html\n<template>\n  <div class=\"app\">\n    <el-container style=\"height: 700px; border: 1px solid #eee\">\n      <!-- 左侧导航栏 -->\n        <el-aside width=\"200px\"\n                  style=\"background-color: rgb(238, 241, 246)\">\n            <el-menu router=\"router\" :default-openeds=\"[\'0\']\">\n                <el-submenu v-for=\"(item,index) in $router.options.routes\"\n                            :key=\"index\"\n                            :index=\"String(index)\">\n                    <template slot=\"title\"><i :class=\"item.class\"></i>{{item.name}}</template>\n                    <el-menu-item v-for=\"(item1,index1) in item.children\"\n                                  :key=\"String(index1)\"\n                                  :index=\"item1.path\"\n                                  v-if=\"!(item1.hidden)\"\n                                  :class=\"$router.path==item1.path?\'is-active\':\'\'\">{{item1.name}}</el-menu-item>\n                </el-submenu>\n            </el-menu>\n        </el-aside>\n\n        <!-- 顶部右侧工具栏 -->\n        <el-container>\n            <el-header style=\"text-align: right; font-size: 12px\">\n                <el-dropdown>\n                    <i class=\"el-icon-setting\"\n                       style=\"margin-right: 15px\"></i>\n                    <el-dropdown-menu slot=\"dropdown\">\n                        <el-dropdown-item>功能一</el-dropdown-item>\n                        <el-dropdown-item>功能二</el-dropdown-item>\n                        <el-dropdown-item>功能三</el-dropdown-item>\n                    </el-dropdown-menu>\n                </el-dropdown>\n                <span>管理员</span>\n            </el-header>\n\n            <!-- 中间区域内容页面的切换 -->\n            <el-main>\n                <router-view />\n            </el-main>\n        </el-container>\n    </el-container>\n  </div>\n</template>\n\n<script>\n\nexport default {\n}\n</script>\n```\n样式参考 element ui 的布局组件，下面有详细的属性说明哦\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b3bb3a9560ee4b659121ff06f9375763.png)\n接着在另外三个页面先随便写点东西，输入<vue 会自动弹出模板\n![在这里插入图片描述](https://img-blog.csdnimg.cn/011c1ef0a5214421af42826d09271838.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/ff912889fd5c48ef89548d2657dc4dc0.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/02557dfebc83454b97dd6692b2804e63.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4819521478304f33a7790e2f765f6522.png)\n#### 修改router路由\n修改 **router** 文件夹下的 **index.js**，主要改两个地方，我直接全部代码粘贴出来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6a3fad73934b49d18832d9222ab19f20.png)\n\n```javascript\nimport Vue from \'vue\'\nimport VueRouter from \'vue-router\'\nimport index from \'../views/index.vue\'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n		path: \"/\",\n		name: \"用户管理\",\n		component: index,\n    class: \'el-icon-s-custom\',\n		children: [\n			{\n				path: \"/\",\n				name: \"数据列表\",\n				component: () => import(\"../views/userList.vue\")\n			},\n      {\n				path: \"/addUser\",\n				name: \"添加用户\",\n				component: () => import(\"../views/addUser.vue\")\n			},\n      {\n				path: \"/editUser/:id\",\n				name: \"编辑用户\",\n				component: () => import(\"../views/addUser.vue\"),\n        hidden: true //隐式路由\n			},\n			{\n				path: \"/userInfo\",\n				name: \"用户信息\",\n				component: () => import(\"../views/userInfoList.vue\")\n			}\n		],\n	},\n]\n\nconst router = new VueRouter({\n  mode: \'history\',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n\n```\n> 简要说明一下，children列表里面的是二级路由，外面的是一级路由\n![在这里插入图片描述](https://img-blog.csdnimg.cn/d372612a74614a6b8c690006e70af6f5.png)\n\n初始操作做完了，先运行看看效果 `npm run serve`，看到图片的效果说明已经OK了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/89c0dbf5f07e4b079b3a652f3de01f72.png)\n#### 封装API接口\n**src**文件夹下新建 **api** 文件夹，文件夹下新建 **user.js**，封装和后端对接的接口请求\n![在这里插入图片描述](https://img-blog.csdnimg.cn/5aaa90afd38b48d9a8d55a14a526ea16.png)\n\n```javascript\nimport request from \'../utils/request\'\n\nexport default {\n\n  // 添加用户接口\n  addUser(user) {\n    return request({\n      url: \'/user\',\n      method: \'post\',\n      data: user\n    })\n  },\n\n  // 删除用户接口\n  deleteUser(id) {\n    return request({\n      url: `/user/${id}`,\n      method: \'delete\'\n    })\n  },\n\n  // 删除多个用户接口\n  deleteMoreUser(ids) {\n    return request({\n      url: \'/user\',\n      method: \'delete\',\n      data: ids\n    })\n  },\n\n  // 编辑用户接口\n  updateUser(user) {\n    return request({\n      url: `/user`,\n      method: \'put\',\n      data: user\n    })\n  },\n\n  // 查询用户列表接口\n  findUserList(index,size, queryParam) {\n    return request({\n      url: `/user/${index}/${size}`,\n      method: \'post\',\n      data: queryParam\n    })\n  },\n\n  // 根据用户编号获取用户信息接口\n  getUserInfo(id) {\n    return request({\n      url: `/user/${id}`,\n      method: \'get\'\n    })\n  }\n}\n```\n\n## 🌲 用户信息页面\n我们先来实现这个页面的功能，相对简单一点，就一个查询的操作，页面模板在element ui这个位置\n![在这里插入图片描述](https://img-blog.csdnimg.cn/f255b3555a62467ba7b150c58e796538.png)\n我们复制下面给出来的源码，粘贴到 **userInfoList.vue** 页面的 < div class=app>粘贴到这里< /div>\n![在这里插入图片描述](https://img-blog.csdnimg.cn/49d5eaef0f91499e96bb183b87fd65cb.png)\n稍做修改，改成我们需要的格式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/891f19c159f64d10a140f4b11002f893.png)\n\n```html\n<div class=\"app\">\n      <el-descriptions class=\"margin-top\"\n                       title=\"小袁同学\"\n                       :column=\"3\"\n                       size=\"medium\"\n                       border>\n\n        <!-- 用户名 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-user\"></i>\n            用户名\n          </template>\n          xiaoyuan\n        </el-descriptions-item>\n\n        <!-- 手机号码 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-mobile-phone\"></i>\n            手机号\n          </template>\n          12345678910\n        </el-descriptions-item>\n\n        <!-- 性别 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-s-check\"></i>\n            性别\n          </template>\n          男\n        </el-descriptions-item>\n\n        <!-- 注册时间 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-tickets\"></i>\n            注册时间\n          </template>\n          2022-05-06 23:56:37\n        </el-descriptions-item>\n\n        <!-- 个人描述 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-edit-outline\"></i>\n            个人描述\n          </template>\n         我性格开朗，希望和你交个朋友哦\n        </el-descriptions-item>\n      </el-descriptions>\n    </div>\n```\n在 **created** 周期函数给后端发送请求，我们打印一下看看数据格式\n> 🔥 注意！记得启动后端的项目，同时controller控制层加上跨域注解，上一篇教程忘记加了\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/453022863453497288fae0b4ff175882.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/890b2f0171d848dab0973866e65e36b9.png)\n```javascript\n<script>\n// 引入接口\nimport user from \'../api/user\'\n\nexport default {\n  data() {\n    return {\n      // 用户信息列表\n      userList: [],\n    }\n  },\n  created() {\n    // 发送请求，获取用户信息列表\n    user.findUserList(1, 10).then((res) => {\n      // 赋值\n      this.userList = res.data.userList\n      console.log(this.userList)\n    })\n  },\n}\n</script>\n```\n保存代码打开浏览器刷新，成功看到数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/1656ac9950114edfbdbba4a819a7d1d6.png)\n最后加上分页组件，通过 **v-for** 标签遍历用户列表显示到页面上，代码有注释，完整代码如下\n\n```html\n<template>\n  <div class=\"app\">\n    <div :class=\"index > 0 ? \'info\' : \'\'\" v-for=\"(item, index) in userList\" :key=\"index\">\n      <el-descriptions class=\"margin-top\"\n                       :title=\"item.nickname\"\n                       :column=\"3\"\n                       size=\"medium\"\n                       border>\n\n        <!-- 用户名 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-user\"></i>\n            用户名\n          </template>\n           {{ item.username }}\n        </el-descriptions-item>\n\n        <!-- 手机号码 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-mobile-phone\"></i>\n            手机号\n          </template>\n           {{ item.phone }}\n        </el-descriptions-item>\n\n        <!-- 性别 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-s-check\"></i>\n            性别\n          </template>\n          {{ item.sex === \'0\' ? \'男\' : \'女\' }}\n        </el-descriptions-item>\n\n        <!-- 注册时间 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-tickets\"></i>\n            注册时间\n          </template>\n          {{ item.createTime }}\n        </el-descriptions-item>\n\n        <!-- 个人描述 -->\n        <el-descriptions-item>\n          <template slot=\"label\">\n            <i class=\"el-icon-edit-outline\"></i>\n            个人描述\n          </template>\n        {{ item.describe }}\n        </el-descriptions-item>\n      </el-descriptions>\n    </div>\n\n    <!-- 分页 -->\n    <div class=\"block\"\n         style=\"text-align:center;margin-top:10px;\">\n      <el-pagination background\n                     @current-change=\"handleCurrentChange\"\n                     :current-page.sync=\"pageParam.index\"\n                     :page-size=\"pageParam.size\"\n                     :total=\"pageParam.total\"\n                     layout=\"prev, pager, next, jumper\">\n      </el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\n// 引入接口\nimport user from \'../api/user\'\n\nexport default {\n  data() {\n    return {\n      // 用户信息列表\n      userList: [],\n      // 分页\n      pageParam: {\n        index: 1,\n        size: 4,\n        total: 0,\n      },\n    }\n  },\n  methods: {\n    // 切页\n    handleCurrentChange(index) {\n      this.pageParam.index = index\n      this.getUserList()\n    },\n    getUserList() {\n      // 发送请求，获取用户信息列表\n      user.findUserList(this.pageParam.index, this.pageParam.size).then((res) => {\n        // 赋值\n        this.userList = res.data.userList\n        // 总数赋值\n        this.pageParam.total = res.data.total\n      })\n    }\n  },\n  created() {\n    this.getUserList()\n  },\n}\n</script>\n\n<style>\n.info {\n  margin-top: 20px;\n}\n</style>\n```\n代码量也不多，保存浏览器刷新看效果，成功显示，切页正常\n![在这里插入图片描述](https://img-blog.csdnimg.cn/8a5fa9f1d32849b0bf8ff188198e4103.png)\n## 🌳 数据列表页面\n这部分稍微难一点，内容比较多，我拆开来一部分一部分介绍，首先能显示用户列表，右侧加上编辑和删除按钮，在 element ui寻找合适的模板\n\n> 想直接看结果跳过过程的，可以拉到本标题的末尾，有这页面的完整代码\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4f00e0a3e5b54d989cc79ab5b5cb8b45.png)\n然后做点修改，先能让数据显示出来，这部分和上面那个差不多的，没有难度\n\n```html\n<template>\n  <div>\n    <!-- 用户信息列表 -->\n    <el-table ref=\"multipleTable\"\n              :data=\"userList\"\n              border\n              style=\"width: 100%\">\n\n      <el-table-column type=\"selection\"\n                       width=\"55\">\n      </el-table-column>\n\n      <!-- 编号 -->\n      <el-table-column label=\"编号\"\n                       width=\"50\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.id }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 用户名 -->\n      <el-table-column label=\"用户名\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.username }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 昵称 -->\n      <el-table-column label=\"昵称\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.nickname }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 密码 -->\n      <el-table-column label=\"性别\"\n                       width=\"60\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.sex ===  \'0\' ? \'男\' : \'女\' }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 手机号码 -->\n      <el-table-column label=\"手机号码\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.phone }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 密码 -->\n      <el-table-column label=\"密码\"\n                       width=\"80\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.password }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 注册时间 -->\n      <el-table-column label=\"注册时间\"\n                       width=\"100\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.gmtCreate }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 提议 -->\n      <el-table-column label=\"描述\"\n                       width=\"auto\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.describe }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column align=\"center\"\n                       label=\"操作\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n         <!-- 编辑按钮 -->\n          <el-button size=\"mini\"\n                      type=\"warning\"\n                      icon=\"el-icon-edit\"></el-button>\n          <!-- 删除按钮 -->\n          <el-button style=\"margin-left: 10px;\"\n                     size=\"mini\"\n                     type=\"danger\"\n                     icon=\"el-icon-delete\"></el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 分页 -->\n    <div class=\"block\"\n         style=\"text-align:center;margin-top:10px;\">\n      <el-pagination background\n                     @current-change=\"handleCurrentChange\"\n                     :current-page.sync=\"pageParam.index\"\n                     :page-size=\"pageParam.size\"\n                     :total=\"pageParam.total\"\n                     layout=\"prev, pager, next, jumper\">\n      </el-pagination>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport user from \'../api/user\'\n\nexport default {\n  data() {\n    return {\n      // 分页\n      pageParam: {\n        index: 1,\n        size: 10,\n        total: 0,\n      },\n      // 数据\n      userList: [],\n    }\n  },\n  methods: {\n    // 切页\n    handleCurrentChange(index) {\n      this.pageParam.index = index\n      this.findUserList()\n    },\n    // 查询用户列表\n    findUserList() {\n      user.findUserList(this.pageParam.index, this.pageParam.size, this.queryParam).then((res) => {\n        this.userList = res.data.userList\n        this.pageParam.total = res.data.total\n      })\n    },\n  },\n  created() {\n    this.findUserList()\n  },\n}\n</script>\n```\n效果如图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4bceacdfb7f64d89860c490066424699.png)\n#### 删除和一键删除\n单个删除，在删除按钮标签加上点击触发函数，传递用户ID参数\n![在这里插入图片描述](https://img-blog.csdnimg.cn/39aad05391c043b8a090381c1ba12119.png)\n接着在 **methods:** 里加上删除方法\n\n```javascript\n// 删除单个用户\n    deleteUser(id) {\n      this.$confirm(\'此操作将删除改用户, 是否继续?\', \'提示\', {\n        confirmButtonText: \'确定\',\n        cancelButtonText: \'取消\',\n        type: \'warning\',\n      }).then(() => {\n        // 调用删除接口\n        user.deleteUser(id).then((_) => {\n          this.$message({\n            type: \'success\',\n            message: \'删除成功!\',\n          })\n          this.findUserList()\n        })\n      }).catch(() => {\n        this.$message({\n          type: \'info\',\n          message: \'已取消删除\',\n        })\n      })\n    },\n```\n一键删除呢在表格标签加上一个属性，再加上一个按钮，属性这些在 element ui组件最下面都有详细的介绍\n![在这里插入图片描述](https://img-blog.csdnimg.cn/cc9613408e86492790383af146b33c44.png)\n添加两个变量值，两个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/53a79d99d739461d819e2b59560c2f51.png)\n保存刷新浏览器，效果如下，测试成功\n![在这里插入图片描述](https://img-blog.csdnimg.cn/27711014f3ea4bfd8777ba4df35bc310.png)\n#### 多条件查询\n在 element ui 的表单组件找到合适的，咋们多加个查询条件框\n![在这里插入图片描述](https://img-blog.csdnimg.cn/530b7307e1a442ed94a7f310d60a4e2e.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/e2f8e38c61664c5dbc3afff04510a849.png)\n添加条件对象参数，一个提交查询方法，一个清空表单的方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/8e087f8380604fd683435e4bee47c56b.png)\n完整代码如下，我在编辑按钮加了路由跳转，这个待会做完添加用户功能再回来说\n```html\n<template>\n  <div class=\"app\">\n    <!-- 查询条件 -->\n    <div>\n     <el-form :inline=\"true\" :model=\"queryParam\" class=\"demo-form-inline\" ref=\"queryParam\">\n\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"queryParam.username\" placeholder=\"输入用户名\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"昵称\" prop=\"nickname\">\n          <el-input v-model=\"queryParam.nickname\" placeholder=\"请输入昵称\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"手机号码\" prop=\"phone\">\n          <el-input v-model=\"queryParam.phone\" placeholder=\"请输入手机号码\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"性别\" prop=\"sex\">\n          <el-select v-model=\"queryParam.sex\" placeholder=\"选择性别\">\n            <el-option label=\"男\" value=\"0\"></el-option>\n            <el-option label=\"女\" value=\"1\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"注册时间\" prop=\"time\">\n          <el-date-picker v-model=\"queryParam.time\"\n                          type=\"date\"\n                          value-format=\"yyyy-MM-dd\"\n                          placeholder=\"选择注册时间\">\n          </el-date-picker>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\"\n                     icon=\"el-icon-search\"\n                     @click=\"submitSearch()\">查询</el-button>\n        </el-form-item>\n        <el-form-item>\n          <el-button icon=\"el-icon-refresh\"\n                     @click=\"clearForm(\'queryParam\')\">重置</el-button>\n        </el-form-item>\n        <el-button v-if=\"more\"\n                   type=\"danger\"\n                   icon=\"el-icon-delete\"\n                   @click=\"deleteMore()\">一键删除</el-button>\n      </el-form>\n    </div>\n\n    <!-- 用户信息列表 -->\n    <el-table ref=\"multipleTable\"\n              :data=\"userList\"\n              border\n              @selection-change=\"handleSelectionChange\"\n              style=\"width: 100%\">\n\n      <el-table-column type=\"selection\"\n                       width=\"55\">\n      </el-table-column>\n\n      <!-- 编号 -->\n      <el-table-column label=\"编号\"\n                       width=\"50\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.id }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 用户名 -->\n      <el-table-column label=\"用户名\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.username }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 昵称 -->\n      <el-table-column label=\"昵称\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.nickname }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 密码 -->\n      <el-table-column label=\"性别\"\n                       width=\"60\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.sex ===  \'0\' ? \'男\' : \'女\' }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 手机号码 -->\n      <el-table-column label=\"手机号码\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.phone }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 密码 -->\n      <el-table-column label=\"密码\"\n                       width=\"80\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.password }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 注册时间 -->\n      <el-table-column label=\"注册时间\"\n                       width=\"100\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.gmtCreate }}</span>\n        </template>\n      </el-table-column>\n\n      <!-- 提议 -->\n      <el-table-column label=\"描述\"\n                       width=\"auto\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.describe }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column align=\"center\"\n                       label=\"操作\"\n                       width=\"150\">\n        <template slot-scope=\"scope\">\n          <!-- 编辑按钮 -->\n          <router-link :to=\"\'/editUser/\' + scope.row.id\">\n            <el-button size=\"mini\"\n                       type=\"warning\"\n                       icon=\"el-icon-edit\"></el-button>\n          </router-link>\n          <!-- 删除按钮 -->\n          <el-button style=\"margin-left: 10px;\"\n                     size=\"mini\"\n                     type=\"danger\"\n                     icon=\"el-icon-delete\"\n                     @click=\"deleteUser(scope.row.id)\"></el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 分页 -->\n    <div class=\"block\"\n         style=\"text-align:center;margin-top:10px;\">\n      <el-pagination background\n                     @current-change=\"handleCurrentChange\"\n                     :current-page.sync=\"pageParam.index\"\n                     :page-size=\"pageParam.size\"\n                     :total=\"pageParam.total\"\n                     layout=\"prev, pager, next, jumper\">\n      </el-pagination>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport user from \'../api/user\'\n\nexport default {\n  data() {\n    return {\n      // 分页\n      pageParam: {\n        index: 1,\n        size: 10,\n        total: 0,\n      },\n      // 数据\n      userList: [],\n      // 一键删除\n      more: false, // 删除按钮显示状态\n      select: [], // 选中的数据\n      // 查询参数对象\n      queryParam: {\n        username: \'\',\n        nickname: \'\',\n        phone: \'\',\n        sex: \'\',\n        time: \'\',\n      },\n    }\n  },\n  methods: {\n    // 提交查询\n    submitSearch() {\n      // 调用下面的查询方法\n      this.findUserList()\n    },\n    // 清空查询参数\n    clearForm(formName) {\n      this.$refs[formName].resetFields()\n    },\n    // 每选中一个就会执行的方法\n    handleSelectionChange(val) {\n      if (val.length === 0) { \n        // 选中0个，隐藏按钮\n        this.more = false\n      } else {\n        // 选中1个以上，显示一键删除按钮\n        this.more = true\n      }\n      this.select = val\n    },\n    // 一键删除多个用户\n    deleteMore() {\n      this.$confirm(\'此操作将删除多个用户，是否继续？\', \'提示\', {\n        confirmButtonText: \'确定\',\n        type: \'warning\',\n      }).then(() => {\n        let ids = []\n        // 取出用户ID\n        this.select.forEach((item) => {\n          ids.push(item.id)\n        })\n        // 调用删除多个用户的接口\n        user.deleteMoreUser(ids).then((_) => {\n          this.$notify({\n            title: \'删除成功\',\n            type: \'success\',\n          })\n          this.findUserList()\n        })\n      })\n    },\n    // 切页\n    handleCurrentChange(index) {\n      this.pageParam.index = index\n      this.findUserList()\n    },\n    // 查询用户列表\n    findUserList() {\n      user.findUserList(this.pageParam.index, this.pageParam.size, this.queryParam).then((res) => {\n        this.userList = res.data.userList\n        this.pageParam.total = res.data.total\n      })\n    },\n    // 删除单个用户\n    deleteUser(id) {\n      this.$confirm(\'此操作将删除改用户, 是否继续?\', \'提示\', {\n        confirmButtonText: \'确定\',\n        cancelButtonText: \'取消\',\n        type: \'warning\',\n      }).then(() => {\n        // 调用删除接口\n        user.deleteUser(id).then((_) => {\n          this.$message({\n            type: \'success\',\n            message: \'删除成功!\',\n          })\n          this.findUserList()\n        })\n      }).catch(() => {\n        this.$message({\n          type: \'info\',\n          message: \'已取消删除\',\n        })\n      })\n    },\n  },\n  created() {\n    this.findUserList()\n  },\n}\n</script>\n```\n## 🌴 添加用户\n添加操作这种表单，我用的最多的就是这个组件模板\n![在这里插入图片描述](https://img-blog.csdnimg.cn/f0378e0151de4cbd9535b17bfc882868.png)\n做点修改，代码如下，标签中的属性在 element ui官方都有详细的介绍，实在不懂的可以私聊我\n\n```html\n<template>\n  <div class=\"app\">\n    <div class=\"form\">\n      <el-form :model=\"userList\" :rules=\"rules\" ref=\"userList\"\n               label-width=\"100px\"\n               class=\"demo-ruleForm\">\n\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userList.username\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"昵称\" prop=\"nickname\">\n          <el-input v-model=\"userList.nickname\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"userList.password\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"电话\" prop=\"phone\">\n          <el-input v-model=\"userList.phone\"  type=\"number\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"性别\" prop=\"sex\">\n          <!-- 单选框 -->\n          <el-select v-model=\"userList.sex\" placeholder=\"请选择性别\">\n            <el-option label=\"男\" value=\"0\"></el-option>\n            <el-option label=\"女\" value=\"1\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"描述\" prop=\"describe\">\n          <el-input type=\"textarea\" v-model=\"userList.describe\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <!-- 提交 -->\n          <el-button type=\"primary\" @click=\"submitForm(\'userList\')\">提交</el-button>\n          <!-- 清空表单 -->\n          <el-button @click=\"resetForm(\'userList\')\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 用户信息表单\n      userList: {\n        username: \'\',\n        nickname: \'\',\n        password: \'\',\n        phone: \'\',\n        sex: \'\',\n        describe: \'\',\n      },\n      // 校验规则，详细看 element ui 官方教程\n      rules: {\n        username: [\n          { required: true, message: \'请输入用户名\', trigger: \'blur\' },\n        ],\n        nickname: [\n          { required: true, message: \'请输入昵称\', trigger: \'blur\' },\n        ],\n        password: [\n          { required: true, message: \'请输入密码\', trigger: \'blur\' }\n        ],\n        phone: [\n          { required: true, message: \'请输入电话\', trigger: \'blur\' }\n        ],\n        sex: [\n          { required: true, message: \'请选择性别\', trigger: \'blur\' }\n        ],\n        describe: [\n          { required: true, message: \'请输入描述\', trigger: \'blur\' }\n        ],\n      },\n    }\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          // 调用添加用户接口\n          user.addUser(this.userList).then((_) => {\n            // 跳转到主页下（userList.vue）\n            this.$router.push(\'/\')\n          })\n        }\n      })\n    },\n    // 清空表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields()\n    },\n  }\n}\n</script>\n\n<style>\n.form {\n  width: 50%;\n}\n/* 清除号码框的上下效果 */\n.form input::-webkit-outer-spin-button,\n.form input::-webkit-inner-spin-button {\n	-webkit-appearance: none;\n}\n\n.form input[type=\'number\'] {\n	-moz-appearance: textfield;\n}\n</style>\n```\n保存刷新浏览器，测试，添加用户成功\n![在这里插入图片描述](https://img-blog.csdnimg.cn/19bcca8fc3714cb5b634b9082639073f.png)\n## 🌵 编辑用户\n编辑用户和添加用户我们使用的是同一个页面，细心的伙伴可以就发现了，一个是 router 路由编辑用户的路径后面绑定了id，一个是数据列表页面的编辑按钮，外层加上了路由跳转的标签，后面携带了id参数\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a7a6cdfcb5974509abdf76d6b49fca04.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/347b29ae57c641feb7819812db6ad357.png)\n回到 **addUser.vue** 编辑，首先加上状态参数，用于页面当前状态判断\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6d6497a395794037a78306f69479932e.png)\n添加判断函数，判断当前页面路径是否存在参数，同时加上监听路由（如果不加，当编辑用户操作时，点击左侧的添加用户，就是出现bug，感兴趣的可以去掉监听路由测试一下）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/db7e41d708b24d188b228e7e7fb7a302.png)\n提交表单方法也要修改，判断是添加还是编辑，调用不同的接口\n![在这里插入图片描述](https://img-blog.csdnimg.cn/81b2bc27a1ac47b087ef023ec943f8f7.png)\n整体代码如下\n```html\n<template>\n  <div class=\"app\">\n    <div class=\"form\">\n      <el-form :model=\"userList\" :rules=\"rules\" ref=\"userList\"\n               label-width=\"100px\"\n               class=\"demo-ruleForm\">\n\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userList.username\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"昵称\" prop=\"nickname\">\n          <el-input v-model=\"userList.nickname\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"userList.password\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"电话\" prop=\"phone\">\n          <el-input v-model=\"userList.phone\"  type=\"number\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"性别\" prop=\"sex\">\n          <!-- 单选框 -->\n          <el-select v-model=\"userList.sex\" placeholder=\"请选择性别\">\n            <el-option label=\"男\" value=\"0\"></el-option>\n            <el-option label=\"女\" value=\"1\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"描述\" prop=\"describe\">\n          <el-input type=\"textarea\" v-model=\"userList.describe\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <!-- 提交 -->\n          <el-button type=\"primary\" @click=\"submitForm(\'userList\')\">提交</el-button>\n          <!-- 清空表单 -->\n          <el-button @click=\"resetForm(\'userList\')\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport user from \'../api/user\'\n\nexport default {\n  data() {\n    return {\n      // 页面状态 false->添加操作，true->编辑操作\n      status: false,\n      // 用户信息表单\n      userList: {\n        username: \'\',\n        nickname: \'\',\n        password: \'\',\n        phone: \'\',\n        sex: \'\',\n        describe: \'\',\n      },\n      // 校验规则，详细看 element ui 官方教程\n      rules: {\n        username: [\n          { required: true, message: \'请输入用户名\', trigger: \'blur\' },\n        ],\n        nickname: [\n          { required: true, message: \'请输入昵称\', trigger: \'blur\' },\n        ],\n        password: [\n          { required: true, message: \'请输入密码\', trigger: \'blur\' }\n        ],\n        phone: [\n          { required: true, message: \'请输入电话\', trigger: \'blur\' }\n        ],\n        sex: [\n          { required: true, message: \'请选择性别\', trigger: \'blur\' }\n        ],\n        describe: [\n          { required: true, message: \'请输入描述\', trigger: \'blur\' }\n        ],\n      },\n    }\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          if(this.status) {\n            // 调用编辑用户接口\n            user.updateUser(this.userList).then(_ => {\n              this.$message({\n                message: \'编辑成功\',\n                type: \'success\'\n              })\n              // 跳转到主页下（userList.vue）\n              this.$router.push(\'/\')\n            })\n          }else{\n            // 调用添加用户接口\n            user.addUser(this.userList).then((_) => {\n              this.$message({\n                message: \'添加成功\',\n                type: \'success\'\n              })\n              // 跳转到主页下（userList.vue）\n              this.$router.push(\'/\')\n            })\n          }\n        }\n      })\n    },\n    // 清空表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields()\n    },\n    // 判断是编辑还是添加用户\n    check() {\n      if(this.$route.params && this.$route.params.id) {\n        // 路径存在id参数，编辑状态\n        this.status = true\n        user.getUserInfo(this.$route.params.id).then( res => {\n          // 通过传递过来的id查询用户数据，覆盖\n          this.userList = res.data.userInfo\n        })\n      }else {\n        // 未存在id参数，添加状态\n        this.status = false\n      }\n    }\n  },\n  created() {\n    // 页面未显示前就先判断状态\n    this.check()\n  },\n  watch: {\n    // 监听路由变化，不然会有bug\n    $route(to, from) {\n      this.check()\n    }\n  }\n}\n</script>\n\n<style>\n.form {\n  width: 50%;\n}\n/* 清除号码框的上下效果 */\n.form input::-webkit-outer-spin-button,\n.form input::-webkit-inner-spin-button {\n	-webkit-appearance: none;\n}\n\n.form input[type=\'number\'] {\n	-moz-appearance: textfield;\n}\n</style>\n```\n## 🌝 全部测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/203d9af748a247c0a3263da284cb74ee.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/c062d8c267f640f6921fe057776066e4.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2a494d8babd54672a488b55f38e6fbb4.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/71cd003ebc7444ce8472779a70f5cac5.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4d7a3f8926664cc6a2a49e903aa1e0b4.png)\n## 🌹 结束语\n好了，整篇的教程呢到这也就结束，SpringBoot+Vue实现简单用户管理平台两篇文章也已经完稿，整篇教程即为原创一字一字手敲，也花了心思想怎么写怎么设计才能更好的直观简洁展示给大家，让大家能看懂\n\n最后，关于教程还有什么不懂的可以评论区留言，我一定会回复的，或者有什么更好的建议和想法也可以在评论区留言，看到好的我会一一采纳，感谢大家的支持\n\n再一次附上Gitee开源地址：[https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master](https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master) 不用大伙翻上去复制了\n\n> - **都看到这里啦，点点赞呀 😋**\n> - **感谢阅读 😘**\n\n', '<blockquote data-source=\"4\"><ul data-source=\"1\"><li><p data-source=\"1\">🚀 <strong>注重版权，转载请注明原作者和原文链接</strong></li>\n<li><p data-source=\"2\">🥭 <strong>作者：小袁同学</strong></li>\n<li><p data-source=\"3\">🍎 <strong>主页：<a href=\"https://www.xiaoyuan-boke.com\" target=\"_blank\">https://www.xiaoyuan-boke.com</a></strong></li>\n<li><p data-source=\"4\">🍉 <strong>进来的小伙伴点点赞呀</strong></li>\n</ul>\n</blockquote>\n<p data-source=\"7\">demo地址预览：<a href=\"http://xiaoyuan-boke.com/user-manager\" target=\"_blank\">http://xiaoyuan-boke.com/user-manager</a></p>\n<p data-source=\"9\">🚀 花了几个小时做了一个SpringBoot+Vue的简单用户管理demo项目，适合新手教程，项目已在Gitee上开源，Gitee开源地址：<a href=\"https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master\" target=\"_blank\">https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master</a></p>\n<blockquote data-source=\"11\"><p data-source=\"11\">Gitee上开源的代码跟本次的案例的代码有些区别，本次案例稍微改了一点点，不过不影响Gitee上的项目运行，大致效果如下，功能可以访问demo地址测试哦</p>\n</blockquote>\n<p data-source=\"13\"><img src=\"https://img-blog.csdnimg.cn/b7021bbad66a4a5e85369ab78c1bef48.png#pic_center#pic_center\" alt=\"在这里插入图片描述\">\n话不多说，下面跟着我一步一步来吧~</p>\n<h2 data-source=\"16\"><a id=\"_15\"></a>前言</h2>\n<p data-source=\"17\">说实话，我个人觉得像这种的简单的crud项目前端比后端要麻烦多，也做的比后端慢</p>\n<h4 data-source=\"18\"><a id=\"_17\"></a>开发前准备</h4>\n<ul data-source=\"19\"><li><p data-source=\"19\">VSCode开发工具，很方便，推荐使用，你用其他前端编译器也没有问题（我之前出过安装教程）</li>\n<li><p data-source=\"20\">Vue环境的搭建，一个 <strong>node.js</strong>（我之前也出过安装教程，可以翻翻），一个 <strong>vue-cli</strong> 脚手架（网上很多教程），只要 <strong>node.js</strong> 成功安装配置没问题，脚手架安装很快的</li>\n<li><p data-source=\"21\">打开我们的 <strong>element ui</strong> 网站，地址：<a href=\"https://element.eleme.cn/#/zh-CN/component/installation\" target=\"_blank\">https://element.eleme.cn/#/zh-CN/component/installation</a></li>\n<li><p data-source=\"22\">打开 <strong>axios</strong> 官方网站，地址：<a href=\"http://www.axios-js.com/docs/\" target=\"_blank\">http://www.axios-js.com/docs/</a></li>\n</ul>\n<h2 data-source=\"24\"><a id=\"__23\"></a>🍒 脚手架创建项目，安装依赖</h2>\n<blockquote data-source=\"25\"><p data-source=\"25\">提一嘴，VSCode记得要安装Vue环境的插件，这个百度也有很多教程，就不介绍啦，还有就是要有一定Vue基础知识，至少了解vue的语法</p>\n</blockquote>\n<h4 data-source=\"26\"><a id=\"_25\"></a>创建项目</h4>\n<p data-source=\"28\">首先以管理员模式打开我们的 <strong>VSCode</strong> 工具，选择文件夹位置（待会创建项目的地方）\n<img src=\"https://img-blog.csdnimg.cn/2d20081677134c539163aea064469a91.png\" alt=\"在这里插入图片描述\">\n在下面终端输命令 <code>vue create user-manager-vue</code> 后面那个是项目名称，下面没有终端控制台的可以点击上面新建终端\n<img src=\"https://img-blog.csdnimg.cn/80be2665294d4d1c804eccf92fff6b3a.png\" alt=\"在这里插入图片描述\">\n选择 <strong>default</strong> 默认配置就好，我这里创建过做过配置，有自己单独的配置选项，你们第一次创建的选择默认的就行，然后等待创建完成\n<img src=\"https://img-blog.csdnimg.cn/2602caf5fc634322904b5e2e2faff68d.png\" alt=\"在这里插入图片描述\">\n如图，一个脚手架的项目就创建好啦\n<img src=\"https://img-blog.csdnimg.cn/341473ac1aa849cdad13a82685322685.png\" alt=\"在这里插入图片描述\">\n我们什么都不做，先运行看看默认项目的样子吧，输入命令 <code>cd user-manager-vue</code> 跳转到项目目录下，接着输入 <code>npm run serve</code> 启动项目</p>\n<p data-source=\"38\">显示如图，则启动成功，打开网站看一下\n<img src=\"https://img-blog.csdnimg.cn/6f6a30413fb748b5aa5a61913eedd27b.png\" alt=\"在这里插入图片描述\">\n效果如图，这是脚手架创建项目的默认模板\n<img src=\"https://img-blog.csdnimg.cn/850faca7a5224d1785c28b3fd31a5074.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"42\"><a id=\"_41\"></a>安装依赖</h4>\n<p data-source=\"43\">回到编译器，ctrl c 结束运行，输入命令 <strong>npm i element-ui -S</strong> 安装element ui，接着输入命令 <strong>npm install axios</strong> 安装axios，用于向后端发送请求</p>\n<h2 data-source=\"45\"><a id=\"_axios_44\"></a>🍅 初始配置，封装axios请求</h2>\n<p data-source=\"46\">修改main.js，加上下面五行代码，全局使用\n<img src=\"https://img-blog.csdnimg.cn/411333205f9e4fe690aa1ffff47637ed.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"49\"><code><span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>;\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'axios\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>;\n\nVue.use(ElementUI);\nVue.prototype.$axios = axios</code></pre><h4 data-source=\"57\"><a id=\"_56\"></a>封装请求</h4>\n<p data-source=\"58\">在 <strong>src</strong> 目录下新建 <strong>utils</strong> 文件夹，文件夹下新建 <strong>request.js</strong> 文件，代码内容我已经写有注释\n<img src=\"https://img-blog.csdnimg.cn/3073387f8e6944aea5fe757e1b7b7c2a.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"62\"><code><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'axios\'</span>\n<span class=\"hljs-keyword\">import</span> { Message } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>\n\n<span class=\"hljs-comment\">// 创建axios实例</span>\n<span class=\"hljs-keyword\">const</span> service = axios.create({\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">\"http://localhost:8081\"</span>, <span class=\"hljs-comment\">// 后端接口地址前缀（端口和后端配置文件一致）</span>\n  <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">5000</span> <span class=\"hljs-comment\">// 请求超时时间</span>\n})\n\n<span class=\"hljs-comment\">// request拦截器</span>\nservice.interceptors.request.use(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 请求头携带我们的权限码，和后端一致就行</span>\n    config.headers[<span class=\"hljs-string\">\'Authentication\'</span>] = <span class=\"hljs-string\">\"dwagfhwhgiawpfwabifpjwaidjwaidwiafihwigfhwaigwhaipgwaihiwahifhwdefef\"</span>\n    <span class=\"hljs-keyword\">return</span> config\n  },\n  error =&gt; {\n    <span class=\"hljs-comment\">// Do something with request error</span>\n    <span class=\"hljs-built_in\">console</span>.log(error) <span class=\"hljs-comment\">// for debug</span>\n    <span class=\"hljs-built_in\">Promise</span>.reject(error)\n  }\n)\n\n<span class=\"hljs-comment\">// response 拦截器</span>\nservice.interceptors.response.use(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n    <span class=\"hljs-comment\">/**\n     * code为非200是抛错 可结合自己业务进行修改\n     */</span>\n    <span class=\"hljs-keyword\">const</span> res = response.data\n    <span class=\"hljs-keyword\">if</span> (res.code !== <span class=\"hljs-number\">200</span>) {\n      Message({\n        <span class=\"hljs-attr\">message</span>: res.message,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'error\'</span>,\n        <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>\n      })\n      <span class=\"hljs-comment\">/**\n       * 可以自定义返回状态码，处理不同的结果\n       */</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">\'error\'</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> response.data\n    }\n  },\n  error =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'err\'</span> + error) <span class=\"hljs-comment\">// for debug</span>\n    Message({\n      <span class=\"hljs-attr\">message</span>: error.message,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'error\'</span>,\n      <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>\n    })\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error)\n  }\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> service</code></pre><h4 data-source=\"121\"><a id=\"appvue_120\"></a>修改app.vue</h4>\n<p data-source=\"122\">修改成下面这样</p>\n<pre class=\"hljs\" data-source=\"124\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.el-header</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#b3c0d1</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">60px</span>;\n}\n\n<span class=\"hljs-selector-class\">.el-aside</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h4 data-source=\"144\"><a id=\"views_143\"></a>修改views文件夹</h4>\n<p data-source=\"145\">删除原来的 <strong>Home.vue</strong> 和 <strong>About.vue</strong> ，新建 <strong>index.vue</strong>，作为左侧导航栏组件（看demo地址效果）</p>\n<p data-source=\"147\">再分别新建三个页面 <strong>userList.vue</strong>、<strong>addUser</strong>、<strong>userInfoList.vue</strong>，三个页面分别对应左侧导航栏展开的三个页面</p>\n<p data-source=\"149\">接着在 <strong>index.vue</strong> 添加代码，</p>\n<pre class=\"hljs\" data-source=\"151\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-container</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 700px; border: 1px solid #eee\"</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- 左侧导航栏 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-aside</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"200px\"</span>\n                  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: rgb(238, 241, 246)\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-menu</span> <span class=\"hljs-attr\">router</span>=<span class=\"hljs-string\">\"router\"</span> <span class=\"hljs-attr\">:default-openeds</span>=<span class=\"hljs-string\">\"[\'0\']\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-submenu</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in $router.options.routes\"</span>\n                            <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n                            <span class=\"hljs-attr\">:index</span>=<span class=\"hljs-string\">\"String(index)\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"item.class\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>{{item.name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-menu-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item1,index1) in item.children\"</span>\n                                  <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"String(index1)\"</span>\n                                  <span class=\"hljs-attr\">:index</span>=<span class=\"hljs-string\">\"item1.path\"</span>\n                                  <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"!(item1.hidden)\"</span>\n                                  <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"$router.path==item1.path?\'is-active\':\'\'\"</span>&gt;</span>{{item1.name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-menu-item</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-submenu</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-menu</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-aside</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 顶部右侧工具栏 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-container</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-header</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align: right; font-size: 12px\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dropdown</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-setting\"</span>\n                       <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"margin-right: 15px\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dropdown-menu</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"dropdown\"</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>功能一<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>功能二<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>功能三<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dropdown-item</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dropdown-menu</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dropdown</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>管理员<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-header</span>&gt;</span>\n\n            <span class=\"hljs-comment\">&lt;!-- 中间区域内容页面的切换 --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-main</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-main</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-container</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-container</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p data-source=\"202\">样式参考 element ui 的布局组件，下面有详细的属性说明哦\n<img src=\"https://img-blog.csdnimg.cn/b3bb3a9560ee4b659121ff06f9375763.png\" alt=\"在这里插入图片描述\">\n接着在另外三个页面先随便写点东西，输入&lt;vue 会自动弹出模板\n<img src=\"https://img-blog.csdnimg.cn/011c1ef0a5214421af42826d09271838.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/ff912889fd5c48ef89548d2657dc4dc0.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/02557dfebc83454b97dd6692b2804e63.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/4819521478304f33a7790e2f765f6522.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"209\"><a id=\"router_208\"></a>修改router路由</h4>\n<p data-source=\"210\">修改 <strong>router</strong> 文件夹下的 <strong>index.js</strong>，主要改两个地方，我直接全部代码粘贴出来\n<img src=\"https://img-blog.csdnimg.cn/6a3fad73934b49d18832d9222ab19f20.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"213\"><code><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n<span class=\"hljs-keyword\">import</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-router\'</span>\n<span class=\"hljs-keyword\">import</span> index <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../views/index.vue\'</span>\n\nVue.use(VueRouter)\n\n<span class=\"hljs-keyword\">const</span> routes = [\n  {\n		<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/\"</span>,\n		<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"用户管理\"</span>,\n		<span class=\"hljs-attr\">component</span>: index,\n    <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\'el-icon-s-custom\'</span>,\n		<span class=\"hljs-attr\">children</span>: [\n			{\n				<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/\"</span>,\n				<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"数据列表\"</span>,\n				<span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"../views/userList.vue\"</span>)\n			},\n      {\n				<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/addUser\"</span>,\n				<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"添加用户\"</span>,\n				<span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"../views/addUser.vue\"</span>)\n			},\n      {\n				<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/editUser/:id\"</span>,\n				<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"编辑用户\"</span>,\n				<span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"../views/addUser.vue\"</span>),\n        <span class=\"hljs-attr\">hidden</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">//隐式路由</span>\n			},\n			{\n				<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/userInfo\"</span>,\n				<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"用户信息\"</span>,\n				<span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"../views/userInfoList.vue\"</span>)\n			}\n		],\n	},\n]\n\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter({\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\'history\'</span>,\n  <span class=\"hljs-attr\">base</span>: process.env.BASE_URL,\n  routes\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router</code></pre><blockquote data-source=\"262\"><p data-source=\"261\">简要说明一下，children列表里面的是二级路由，外面的是一级路由\n<img src=\"https://img-blog.csdnimg.cn/d372612a74614a6b8c690006e70af6f5.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<p data-source=\"264\">初始操作做完了，先运行看看效果 <code>npm run serve</code>，看到图片的效果说明已经OK了\n<img src=\"https://img-blog.csdnimg.cn/89c0dbf5f07e4b079b3a652f3de01f72.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"266\"><a id=\"API_265\"></a>封装API接口</h4>\n<p data-source=\"267\"><strong>src</strong>文件夹下新建 <strong>api</strong> 文件夹，文件夹下新建 <strong>user.js</strong>，封装和后端对接的接口请求\n<img src=\"https://img-blog.csdnimg.cn/5aaa90afd38b48d9a8d55a14a526ea16.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"270\"><code><span class=\"hljs-keyword\">import</span> request <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../utils/request\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n\n  <span class=\"hljs-comment\">// 添加用户接口</span>\n  addUser(user) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\'/user\'</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'post\'</span>,\n      <span class=\"hljs-attr\">data</span>: user\n    })\n  },\n\n  <span class=\"hljs-comment\">// 删除用户接口</span>\n  deleteUser(id) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/user/<span class=\"hljs-subst\">${id}</span>`</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'delete\'</span>\n    })\n  },\n\n  <span class=\"hljs-comment\">// 删除多个用户接口</span>\n  deleteMoreUser(ids) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\'/user\'</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'delete\'</span>,\n      <span class=\"hljs-attr\">data</span>: ids\n    })\n  },\n\n  <span class=\"hljs-comment\">// 编辑用户接口</span>\n  updateUser(user) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/user`</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'put\'</span>,\n      <span class=\"hljs-attr\">data</span>: user\n    })\n  },\n\n  <span class=\"hljs-comment\">// 查询用户列表接口</span>\n  findUserList(index,size, queryParam) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/user/<span class=\"hljs-subst\">${index}</span>/<span class=\"hljs-subst\">${size}</span>`</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'post\'</span>,\n      <span class=\"hljs-attr\">data</span>: queryParam\n    })\n  },\n\n  <span class=\"hljs-comment\">// 根据用户编号获取用户信息接口</span>\n  getUserInfo(id) {\n    <span class=\"hljs-keyword\">return</span> request({\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/user/<span class=\"hljs-subst\">${id}</span>`</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'get\'</span>\n    })\n  }\n}</code></pre><h2 data-source=\"329\"><a id=\"__328\"></a>🌲 用户信息页面</h2>\n<p data-source=\"330\">我们先来实现这个页面的功能，相对简单一点，就一个查询的操作，页面模板在element ui这个位置\n<img src=\"https://img-blog.csdnimg.cn/f255b3555a62467ba7b150c58e796538.png\" alt=\"在这里插入图片描述\">\n我们复制下面给出来的源码，粘贴到 <strong>userInfoList.vue</strong> 页面的 &lt; div class=app&gt;粘贴到这里&lt; /div&gt;\n<img src=\"https://img-blog.csdnimg.cn/49d5eaef0f91499e96bb183b87fd65cb.png\" alt=\"在这里插入图片描述\">\n稍做修改，改成我们需要的格式\n<img src=\"https://img-blog.csdnimg.cn/891f19c159f64d10a140f4b11002f893.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"337\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"margin-top\"</span>\n                       <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"小袁同学\"</span>\n                       <span class=\"hljs-attr\">:column</span>=<span class=\"hljs-string\">\"3\"</span>\n                       <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"medium\"</span>\n                       <span class=\"hljs-attr\">border</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 用户名 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-user\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            用户名\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          xiaoyuan\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 手机号码 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-mobile-phone\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            手机号\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          12345678910\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 性别 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-s-check\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            性别\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          男\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 注册时间 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-tickets\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            注册时间\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          2022-05-06 23:56:37\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 个人描述 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-edit-outline\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            个人描述\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n         我性格开朗，希望和你交个朋友哦\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><p data-source=\"392\">在 <strong>created</strong> 周期函数给后端发送请求，我们打印一下看看数据格式</p>\n<blockquote data-source=\"394\"><p data-source=\"393\">🔥 注意！记得启动后端的项目，同时controller控制层加上跨域注解，上一篇教程忘记加了\n<img src=\"https://img-blog.csdnimg.cn/453022863453497288fae0b4ff175882.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<p data-source=\"396\"><img src=\"https://img-blog.csdnimg.cn/890b2f0171d848dab0973866e65e36b9.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"hljs\" data-source=\"397\"><code>&lt;script&gt;\n<span class=\"hljs-comment\">// 引入接口</span>\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../api/user\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 用户信息列表</span>\n      <span class=\"hljs-attr\">userList</span>: [],\n    }\n  },\n  created() {\n    <span class=\"hljs-comment\">// 发送请求，获取用户信息列表</span>\n    user.findUserList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// 赋值</span>\n      <span class=\"hljs-keyword\">this</span>.userList = res.data.userList\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.userList)\n    })\n  },\n}\n&lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><p data-source=\"420\">保存代码打开浏览器刷新，成功看到数据\n<img src=\"https://img-blog.csdnimg.cn/1656ac9950114edfbdbba4a819a7d1d6.png\" alt=\"在这里插入图片描述\">\n最后加上分页组件，通过 <strong>v-for</strong> 标签遍历用户列表显示到页面上，代码有注释，完整代码如下</p>\n<pre class=\"hljs\" data-source=\"424\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"index &gt; 0 ? \'info\' : \'\'\"</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in userList\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"margin-top\"</span>\n                       <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"item.nickname\"</span>\n                       <span class=\"hljs-attr\">:column</span>=<span class=\"hljs-string\">\"3\"</span>\n                       <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"medium\"</span>\n                       <span class=\"hljs-attr\">border</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 用户名 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-user\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            用户名\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n           {{ item.username }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 手机号码 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-mobile-phone\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            手机号\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n           {{ item.phone }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 性别 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-s-check\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            性别\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          {{ item.sex === \'0\' ? \'男\' : \'女\' }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 注册时间 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-tickets\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            注册时间\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n          {{ item.createTime }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- 个人描述 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-edit-outline\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n            个人描述\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n        {{ item.describe }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions-item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-descriptions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 分页 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span>\n         <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align:center;margin-top:10px;\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-pagination</span> <span class=\"hljs-attr\">background</span>\n                     @<span class=\"hljs-attr\">current-change</span>=<span class=\"hljs-string\">\"handleCurrentChange\"</span>\n                     <span class=\"hljs-attr\">:current-page.sync</span>=<span class=\"hljs-string\">\"pageParam.index\"</span>\n                     <span class=\"hljs-attr\">:page-size</span>=<span class=\"hljs-string\">\"pageParam.size\"</span>\n                     <span class=\"hljs-attr\">:total</span>=<span class=\"hljs-string\">\"pageParam.total\"</span>\n                     <span class=\"hljs-attr\">layout</span>=<span class=\"hljs-string\">\"prev, pager, next, jumper\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-pagination</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-comment\">// 引入接口</span>\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../api/user\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 用户信息列表</span>\n      <span class=\"hljs-attr\">userList</span>: [],\n      <span class=\"hljs-comment\">// 分页</span>\n      <span class=\"hljs-attr\">pageParam</span>: {\n        <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">4</span>,\n        <span class=\"hljs-attr\">total</span>: <span class=\"hljs-number\">0</span>,\n      },\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">// 切页</span>\n    handleCurrentChange(index) {\n      <span class=\"hljs-keyword\">this</span>.pageParam.index = index\n      <span class=\"hljs-keyword\">this</span>.getUserList()\n    },\n    getUserList() {\n      <span class=\"hljs-comment\">// 发送请求，获取用户信息列表</span>\n      user.findUserList(<span class=\"hljs-keyword\">this</span>.pageParam.index, <span class=\"hljs-keyword\">this</span>.pageParam.size).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n        <span class=\"hljs-comment\">// 赋值</span>\n        <span class=\"hljs-keyword\">this</span>.userList = res.data.userList\n        <span class=\"hljs-comment\">// 总数赋值</span>\n        <span class=\"hljs-keyword\">this</span>.pageParam.total = res.data.total\n      })\n    }\n  },\n  created() {\n    <span class=\"hljs-keyword\">this</span>.getUserList()\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.info</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><p data-source=\"540\">代码量也不多，保存浏览器刷新看效果，成功显示，切页正常\n<img src=\"https://img-blog.csdnimg.cn/8a5fa9f1d32849b0bf8ff188198e4103.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"542\"><a id=\"__541\"></a>🌳 数据列表页面</h2>\n<p data-source=\"543\">这部分稍微难一点，内容比较多，我拆开来一部分一部分介绍，首先能显示用户列表，右侧加上编辑和删除按钮，在 element ui寻找合适的模板</p>\n<blockquote data-source=\"545\"><p data-source=\"545\">想直接看结果跳过过程的，可以拉到本标题的末尾，有这页面的完整代码</p>\n</blockquote>\n<p data-source=\"547\"><img src=\"https://img-blog.csdnimg.cn/4f00e0a3e5b54d989cc79ab5b5cb8b45.png\" alt=\"在这里插入图片描述\">\n然后做点修改，先能让数据显示出来，这部分和上面那个差不多的，没有难度</p>\n<pre class=\"hljs\" data-source=\"550\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 用户信息列表 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"multipleTable\"</span>\n              <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"userList\"</span>\n              <span class=\"hljs-attr\">border</span>\n              <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%\"</span>&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"selection\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"55\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 编号 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"编号\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"50\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.id }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 用户名 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"用户名\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.username }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 昵称 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"昵称\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.nickname }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 密码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"性别\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"60\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.sex ===  \'0\' ? \'男\' : \'女\' }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 手机号码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"手机号码\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.phone }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 密码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"密码\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"80\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.password }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 注册时间 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"注册时间\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.gmtCreate }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 提议 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"auto\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.describe }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>\n                       <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"操作\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n         <span class=\"hljs-comment\">&lt;!-- 编辑按钮 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"mini\"</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"warning\"</span>\n                      <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-edit\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 删除按钮 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"margin-left: 10px;\"</span>\n                     <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"mini\"</span>\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"danger\"</span>\n                     <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-delete\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 分页 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span>\n         <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align:center;margin-top:10px;\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-pagination</span> <span class=\"hljs-attr\">background</span>\n                     @<span class=\"hljs-attr\">current-change</span>=<span class=\"hljs-string\">\"handleCurrentChange\"</span>\n                     <span class=\"hljs-attr\">:current-page.sync</span>=<span class=\"hljs-string\">\"pageParam.index\"</span>\n                     <span class=\"hljs-attr\">:page-size</span>=<span class=\"hljs-string\">\"pageParam.size\"</span>\n                     <span class=\"hljs-attr\">:total</span>=<span class=\"hljs-string\">\"pageParam.total\"</span>\n                     <span class=\"hljs-attr\">layout</span>=<span class=\"hljs-string\">\"prev, pager, next, jumper\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-pagination</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../api/user\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 分页</span>\n      <span class=\"hljs-attr\">pageParam</span>: {\n        <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-attr\">total</span>: <span class=\"hljs-number\">0</span>,\n      },\n      <span class=\"hljs-comment\">// 数据</span>\n      <span class=\"hljs-attr\">userList</span>: [],\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">// 切页</span>\n    handleCurrentChange(index) {\n      <span class=\"hljs-keyword\">this</span>.pageParam.index = index\n      <span class=\"hljs-keyword\">this</span>.findUserList()\n    },\n    <span class=\"hljs-comment\">// 查询用户列表</span>\n    findUserList() {\n      user.findUserList(<span class=\"hljs-keyword\">this</span>.pageParam.index, <span class=\"hljs-keyword\">this</span>.pageParam.size, <span class=\"hljs-keyword\">this</span>.queryParam).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.userList = res.data.userList\n        <span class=\"hljs-keyword\">this</span>.pageParam.total = res.data.total\n      })\n    },\n  },\n  created() {\n    <span class=\"hljs-keyword\">this</span>.findUserList()\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p data-source=\"695\">效果如图\n<img src=\"https://img-blog.csdnimg.cn/4bceacdfb7f64d89860c490066424699.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"697\"><a id=\"_696\"></a>删除和一键删除</h4>\n<p data-source=\"698\">单个删除，在删除按钮标签加上点击触发函数，传递用户ID参数\n<img src=\"https://img-blog.csdnimg.cn/39aad05391c043b8a090381c1ba12119.png\" alt=\"在这里插入图片描述\">\n接着在 <strong>methods:</strong> 里加上删除方法</p>\n<pre class=\"hljs\" data-source=\"702\"><code><span class=\"hljs-comment\">// 删除单个用户</span>\n    deleteUser(id) {\n      <span class=\"hljs-keyword\">this</span>.$confirm(<span class=\"hljs-string\">\'此操作将删除改用户, 是否继续?\'</span>, <span class=\"hljs-string\">\'提示\'</span>, {\n        <span class=\"hljs-attr\">confirmButtonText</span>: <span class=\"hljs-string\">\'确定\'</span>,\n        <span class=\"hljs-attr\">cancelButtonText</span>: <span class=\"hljs-string\">\'取消\'</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'warning\'</span>,\n      }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-comment\">// 调用删除接口</span>\n        user.deleteUser(id).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">this</span>.$message({\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'success\'</span>,\n            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'删除成功!\'</span>,\n          })\n          <span class=\"hljs-keyword\">this</span>.findUserList()\n        })\n      }).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.$message({\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'info\'</span>,\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'已取消删除\'</span>,\n        })\n      })\n    },</code></pre><p data-source=\"726\">一键删除呢在表格标签加上一个属性，再加上一个按钮，属性这些在 element ui组件最下面都有详细的介绍\n<img src=\"https://img-blog.csdnimg.cn/cc9613408e86492790383af146b33c44.png\" alt=\"在这里插入图片描述\">\n添加两个变量值，两个方法\n<img src=\"https://img-blog.csdnimg.cn/53a79d99d739461d819e2b59560c2f51.png\" alt=\"在这里插入图片描述\">\n保存刷新浏览器，效果如下，测试成功\n<img src=\"https://img-blog.csdnimg.cn/27711014f3ea4bfd8777ba4df35bc310.png\" alt=\"在这里插入图片描述\"></p>\n<h4 data-source=\"732\"><a id=\"_731\"></a>多条件查询</h4>\n<p data-source=\"733\">在 element ui 的表单组件找到合适的，咋们多加个查询条件框\n<img src=\"https://img-blog.csdnimg.cn/530b7307e1a442ed94a7f310d60a4e2e.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/e2f8e38c61664c5dbc3afff04510a849.png\" alt=\"在这里插入图片描述\">\n添加条件对象参数，一个提交查询方法，一个清空表单的方法\n<img src=\"https://img-blog.csdnimg.cn/8e087f8380604fd683435e4bee47c56b.png\" alt=\"在这里插入图片描述\">\n完整代码如下，我在编辑按钮加了路由跳转，这个待会做完添加用户功能再回来说</p>\n<pre class=\"hljs\" data-source=\"739\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 查询条件 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form</span> <span class=\"hljs-attr\">:inline</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">:model</span>=<span class=\"hljs-string\">\"queryParam\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"demo-form-inline\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"queryParam\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"用户名\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"username\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"queryParam.username\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"输入用户名\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"昵称\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"nickname\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"queryParam.nickname\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请输入昵称\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"手机号码\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"phone\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"queryParam.phone\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请输入手机号码\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"性别\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"queryParam.sex\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"选择性别\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"男\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"0\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"女\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"注册时间\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"time\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-date-picker</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"queryParam.time\"</span>\n                          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"date\"</span>\n                          <span class=\"hljs-attr\">value-format</span>=<span class=\"hljs-string\">\"yyyy-MM-dd\"</span>\n                          <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"选择注册时间\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-date-picker</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>\n                     <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-search\"</span>\n                     @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"submitSearch()\"</span>&gt;</span>查询<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-refresh\"</span>\n                     @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"clearForm(\'queryParam\')\"</span>&gt;</span>重置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"more\"</span>\n                   <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"danger\"</span>\n                   <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-delete\"</span>\n                   @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteMore()\"</span>&gt;</span>一键删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 用户信息列表 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"multipleTable\"</span>\n              <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"userList\"</span>\n              <span class=\"hljs-attr\">border</span>\n              @<span class=\"hljs-attr\">selection-change</span>=<span class=\"hljs-string\">\"handleSelectionChange\"</span>\n              <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%\"</span>&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"selection\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"55\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 编号 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"编号\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"50\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.id }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 用户名 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"用户名\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.username }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 昵称 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"昵称\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.nickname }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 密码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"性别\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"60\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.sex ===  \'0\' ? \'男\' : \'女\' }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 手机号码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"手机号码\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.phone }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 密码 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"密码\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"80\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.password }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 注册时间 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"注册时间\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.gmtCreate }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- 提议 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"auto\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ scope.row.describe }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-table-column</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>\n                       <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"操作\"</span>\n                       <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 编辑按钮 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"\'/editUser/\' + scope.row.id\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"mini\"</span>\n                       <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"warning\"</span>\n                       <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-edit\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 删除按钮 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"margin-left: 10px;\"</span>\n                     <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"mini\"</span>\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"danger\"</span>\n                     <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"el-icon-delete\"</span>\n                     @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteUser(scope.row.id)\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 分页 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span>\n         <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align:center;margin-top:10px;\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-pagination</span> <span class=\"hljs-attr\">background</span>\n                     @<span class=\"hljs-attr\">current-change</span>=<span class=\"hljs-string\">\"handleCurrentChange\"</span>\n                     <span class=\"hljs-attr\">:current-page.sync</span>=<span class=\"hljs-string\">\"pageParam.index\"</span>\n                     <span class=\"hljs-attr\">:page-size</span>=<span class=\"hljs-string\">\"pageParam.size\"</span>\n                     <span class=\"hljs-attr\">:total</span>=<span class=\"hljs-string\">\"pageParam.total\"</span>\n                     <span class=\"hljs-attr\">layout</span>=<span class=\"hljs-string\">\"prev, pager, next, jumper\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-pagination</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../api/user\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 分页</span>\n      <span class=\"hljs-attr\">pageParam</span>: {\n        <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-attr\">total</span>: <span class=\"hljs-number\">0</span>,\n      },\n      <span class=\"hljs-comment\">// 数据</span>\n      <span class=\"hljs-attr\">userList</span>: [],\n      <span class=\"hljs-comment\">// 一键删除</span>\n      <span class=\"hljs-attr\">more</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 删除按钮显示状态</span>\n      <span class=\"hljs-attr\">select</span>: [], <span class=\"hljs-comment\">// 选中的数据</span>\n      <span class=\"hljs-comment\">// 查询参数对象</span>\n      <span class=\"hljs-attr\">queryParam</span>: {\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">phone</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">time</span>: <span class=\"hljs-string\">\'\'</span>,\n      },\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">// 提交查询</span>\n    submitSearch() {\n      <span class=\"hljs-comment\">// 调用下面的查询方法</span>\n      <span class=\"hljs-keyword\">this</span>.findUserList()\n    },\n    <span class=\"hljs-comment\">// 清空查询参数</span>\n    clearForm(formName) {\n      <span class=\"hljs-keyword\">this</span>.$refs[formName].resetFields()\n    },\n    <span class=\"hljs-comment\">// 每选中一个就会执行的方法</span>\n    handleSelectionChange(val) {\n      <span class=\"hljs-keyword\">if</span> (val.length === <span class=\"hljs-number\">0</span>) { \n        <span class=\"hljs-comment\">// 选中0个，隐藏按钮</span>\n        <span class=\"hljs-keyword\">this</span>.more = <span class=\"hljs-literal\">false</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 选中1个以上，显示一键删除按钮</span>\n        <span class=\"hljs-keyword\">this</span>.more = <span class=\"hljs-literal\">true</span>\n      }\n      <span class=\"hljs-keyword\">this</span>.select = val\n    },\n    <span class=\"hljs-comment\">// 一键删除多个用户</span>\n    deleteMore() {\n      <span class=\"hljs-keyword\">this</span>.$confirm(<span class=\"hljs-string\">\'此操作将删除多个用户，是否继续？\'</span>, <span class=\"hljs-string\">\'提示\'</span>, {\n        <span class=\"hljs-attr\">confirmButtonText</span>: <span class=\"hljs-string\">\'确定\'</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'warning\'</span>,\n      }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">let</span> ids = []\n        <span class=\"hljs-comment\">// 取出用户ID</span>\n        <span class=\"hljs-keyword\">this</span>.select.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n          ids.push(item.id)\n        })\n        <span class=\"hljs-comment\">// 调用删除多个用户的接口</span>\n        user.deleteMoreUser(ids).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">this</span>.$notify({\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\'删除成功\'</span>,\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'success\'</span>,\n          })\n          <span class=\"hljs-keyword\">this</span>.findUserList()\n        })\n      })\n    },\n    <span class=\"hljs-comment\">// 切页</span>\n    handleCurrentChange(index) {\n      <span class=\"hljs-keyword\">this</span>.pageParam.index = index\n      <span class=\"hljs-keyword\">this</span>.findUserList()\n    },\n    <span class=\"hljs-comment\">// 查询用户列表</span>\n    findUserList() {\n      user.findUserList(<span class=\"hljs-keyword\">this</span>.pageParam.index, <span class=\"hljs-keyword\">this</span>.pageParam.size, <span class=\"hljs-keyword\">this</span>.queryParam).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.userList = res.data.userList\n        <span class=\"hljs-keyword\">this</span>.pageParam.total = res.data.total\n      })\n    },\n    <span class=\"hljs-comment\">// 删除单个用户</span>\n    deleteUser(id) {\n      <span class=\"hljs-keyword\">this</span>.$confirm(<span class=\"hljs-string\">\'此操作将删除改用户, 是否继续?\'</span>, <span class=\"hljs-string\">\'提示\'</span>, {\n        <span class=\"hljs-attr\">confirmButtonText</span>: <span class=\"hljs-string\">\'确定\'</span>,\n        <span class=\"hljs-attr\">cancelButtonText</span>: <span class=\"hljs-string\">\'取消\'</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'warning\'</span>,\n      }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-comment\">// 调用删除接口</span>\n        user.deleteUser(id).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">this</span>.$message({\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'success\'</span>,\n            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'删除成功!\'</span>,\n          })\n          <span class=\"hljs-keyword\">this</span>.findUserList()\n        })\n      }).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.$message({\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'info\'</span>,\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'已取消删除\'</span>,\n        })\n      })\n    },\n  },\n  created() {\n    <span class=\"hljs-keyword\">this</span>.findUserList()\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2 data-source=\"1009\"><a id=\"__1008\"></a>🌴 添加用户</h2>\n<p data-source=\"1010\">添加操作这种表单，我用的最多的就是这个组件模板\n<img src=\"https://img-blog.csdnimg.cn/f0378e0151de4cbd9535b17bfc882868.png\" alt=\"在这里插入图片描述\">\n做点修改，代码如下，标签中的属性在 element ui官方都有详细的介绍，实在不懂的可以私聊我</p>\n<pre class=\"hljs\" data-source=\"1014\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form</span> <span class=\"hljs-attr\">:model</span>=<span class=\"hljs-string\">\"userList\"</span> <span class=\"hljs-attr\">:rules</span>=<span class=\"hljs-string\">\"rules\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"userList\"</span>\n               <span class=\"hljs-attr\">label-width</span>=<span class=\"hljs-string\">\"100px\"</span>\n               <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"demo-ruleForm\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"用户名\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"username\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.username\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"昵称\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"nickname\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.nickname\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"密码\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"password\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.password\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"电话\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"phone\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.phone\"</span>  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"性别\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 单选框 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.sex\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请选择性别\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"男\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"0\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"女\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"describe\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"textarea\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.describe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 提交 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"submitForm(\'userList\')\"</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 清空表单 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"resetForm(\'userList\')\"</span>&gt;</span>重置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 用户信息表单</span>\n      <span class=\"hljs-attr\">userList</span>: {\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">phone</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">describe</span>: <span class=\"hljs-string\">\'\'</span>,\n      },\n      <span class=\"hljs-comment\">// 校验规则，详细看 element ui 官方教程</span>\n      <span class=\"hljs-attr\">rules</span>: {\n        <span class=\"hljs-attr\">username</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入用户名\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> },\n        ],\n        <span class=\"hljs-attr\">nickname</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入昵称\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> },\n        ],\n        <span class=\"hljs-attr\">password</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入密码\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">phone</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入电话\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">sex</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请选择性别\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">describe</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入描述\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n      },\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    submitForm(formName) {\n      <span class=\"hljs-keyword\">this</span>.$refs[formName].validate(<span class=\"hljs-function\">(<span class=\"hljs-params\">valid</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (valid) {\n          <span class=\"hljs-comment\">// 调用添加用户接口</span>\n          user.addUser(<span class=\"hljs-keyword\">this</span>.userList).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =&gt;</span> {\n            <span class=\"hljs-comment\">// 跳转到主页下（userList.vue）</span>\n            <span class=\"hljs-keyword\">this</span>.$router.push(<span class=\"hljs-string\">\'/\'</span>)\n          })\n        }\n      })\n    },\n    <span class=\"hljs-comment\">// 清空表单</span>\n    resetForm(formName) {\n      <span class=\"hljs-keyword\">this</span>.$refs[formName].resetFields()\n    },\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.form</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50%</span>;\n}\n<span class=\"hljs-comment\">/* 清除号码框的上下效果 */</span>\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">::-webkit-outer-spin-button</span>,\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">::-webkit-inner-spin-button</span> {\n	<span class=\"hljs-attribute\">-webkit-appearance</span>: none;\n}\n\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">\'number\'</span>]</span> {\n	<span class=\"hljs-attribute\">-moz-appearance</span>: textfield;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><p data-source=\"1131\">保存刷新浏览器，测试，添加用户成功\n<img src=\"https://img-blog.csdnimg.cn/19bcca8fc3714cb5b634b9082639073f.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"1133\"><a id=\"__1132\"></a>🌵 编辑用户</h2>\n<p data-source=\"1134\">编辑用户和添加用户我们使用的是同一个页面，细心的伙伴可以就发现了，一个是 router 路由编辑用户的路径后面绑定了id，一个是数据列表页面的编辑按钮，外层加上了路由跳转的标签，后面携带了id参数\n<img src=\"https://img-blog.csdnimg.cn/a7a6cdfcb5974509abdf76d6b49fca04.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/347b29ae57c641feb7819812db6ad357.png\" alt=\"在这里插入图片描述\">\n回到 <strong>addUser.vue</strong> 编辑，首先加上状态参数，用于页面当前状态判断\n<img src=\"https://img-blog.csdnimg.cn/6d6497a395794037a78306f69479932e.png\" alt=\"在这里插入图片描述\">\n添加判断函数，判断当前页面路径是否存在参数，同时加上监听路由（如果不加，当编辑用户操作时，点击左侧的添加用户，就是出现bug，感兴趣的可以去掉监听路由测试一下）\n<img src=\"https://img-blog.csdnimg.cn/db7e41d708b24d188b228e7e7fb7a302.png\" alt=\"在这里插入图片描述\">\n提交表单方法也要修改，判断是添加还是编辑，调用不同的接口\n<img src=\"https://img-blog.csdnimg.cn/81b2bc27a1ac47b087ef023ec943f8f7.png\" alt=\"在这里插入图片描述\">\n整体代码如下</p>\n<pre class=\"hljs\" data-source=\"1144\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form</span> <span class=\"hljs-attr\">:model</span>=<span class=\"hljs-string\">\"userList\"</span> <span class=\"hljs-attr\">:rules</span>=<span class=\"hljs-string\">\"rules\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"userList\"</span>\n               <span class=\"hljs-attr\">label-width</span>=<span class=\"hljs-string\">\"100px\"</span>\n               <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"demo-ruleForm\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"用户名\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"username\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.username\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"昵称\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"nickname\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.nickname\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"密码\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"password\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.password\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"电话\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"phone\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.phone\"</span>  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"性别\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 单选框 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.sex\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请选择性别\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"男\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"0\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"女\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">\"describe\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"textarea\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"userList.describe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 提交 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"submitForm(\'userList\')\"</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!-- 清空表单 --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"resetForm(\'userList\')\"</span>&gt;</span>重置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../api/user\'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 页面状态 false-&gt;添加操作，true-&gt;编辑操作</span>\n      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-comment\">// 用户信息表单</span>\n      <span class=\"hljs-attr\">userList</span>: {\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">phone</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">\'\'</span>,\n        <span class=\"hljs-attr\">describe</span>: <span class=\"hljs-string\">\'\'</span>,\n      },\n      <span class=\"hljs-comment\">// 校验规则，详细看 element ui 官方教程</span>\n      <span class=\"hljs-attr\">rules</span>: {\n        <span class=\"hljs-attr\">username</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入用户名\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> },\n        ],\n        <span class=\"hljs-attr\">nickname</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入昵称\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> },\n        ],\n        <span class=\"hljs-attr\">password</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入密码\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">phone</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入电话\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">sex</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请选择性别\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n        <span class=\"hljs-attr\">describe</span>: [\n          { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'请输入描述\'</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'blur\'</span> }\n        ],\n      },\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    submitForm(formName) {\n      <span class=\"hljs-keyword\">this</span>.$refs[formName].validate(<span class=\"hljs-function\">(<span class=\"hljs-params\">valid</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (valid) {\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status) {\n            <span class=\"hljs-comment\">// 调用编辑用户接口</span>\n            user.updateUser(<span class=\"hljs-keyword\">this</span>.userList).then(<span class=\"hljs-function\"><span class=\"hljs-params\">_</span> =&gt;</span> {\n              <span class=\"hljs-keyword\">this</span>.$message({\n                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'编辑成功\'</span>,\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'success\'</span>\n              })\n              <span class=\"hljs-comment\">// 跳转到主页下（userList.vue）</span>\n              <span class=\"hljs-keyword\">this</span>.$router.push(<span class=\"hljs-string\">\'/\'</span>)\n            })\n          }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-comment\">// 调用添加用户接口</span>\n            user.addUser(<span class=\"hljs-keyword\">this</span>.userList).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =&gt;</span> {\n              <span class=\"hljs-keyword\">this</span>.$message({\n                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'添加成功\'</span>,\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'success\'</span>\n              })\n              <span class=\"hljs-comment\">// 跳转到主页下（userList.vue）</span>\n              <span class=\"hljs-keyword\">this</span>.$router.push(<span class=\"hljs-string\">\'/\'</span>)\n            })\n          }\n        }\n      })\n    },\n    <span class=\"hljs-comment\">// 清空表单</span>\n    resetForm(formName) {\n      <span class=\"hljs-keyword\">this</span>.$refs[formName].resetFields()\n    },\n    <span class=\"hljs-comment\">// 判断是编辑还是添加用户</span>\n    check() {\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.$route.params &amp;&amp; <span class=\"hljs-keyword\">this</span>.$route.params.id) {\n        <span class=\"hljs-comment\">// 路径存在id参数，编辑状态</span>\n        <span class=\"hljs-keyword\">this</span>.status = <span class=\"hljs-literal\">true</span>\n        user.getUserInfo(<span class=\"hljs-keyword\">this</span>.$route.params.id).then( <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n          <span class=\"hljs-comment\">// 通过传递过来的id查询用户数据，覆盖</span>\n          <span class=\"hljs-keyword\">this</span>.userList = res.data.userInfo\n        })\n      }<span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 未存在id参数，添加状态</span>\n        <span class=\"hljs-keyword\">this</span>.status = <span class=\"hljs-literal\">false</span>\n      }\n    }\n  },\n  created() {\n    <span class=\"hljs-comment\">// 页面未显示前就先判断状态</span>\n    <span class=\"hljs-keyword\">this</span>.check()\n  },\n  <span class=\"hljs-attr\">watch</span>: {\n    <span class=\"hljs-comment\">// 监听路由变化，不然会有bug</span>\n    $route(to, <span class=\"hljs-keyword\">from</span>) {\n      <span class=\"hljs-keyword\">this</span>.check()\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.form</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50%</span>;\n}\n<span class=\"hljs-comment\">/* 清除号码框的上下效果 */</span>\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">::-webkit-outer-spin-button</span>,\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">::-webkit-inner-spin-button</span> {\n	<span class=\"hljs-attribute\">-webkit-appearance</span>: none;\n}\n\n<span class=\"hljs-selector-class\">.form</span> <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">\'number\'</span>]</span> {\n	<span class=\"hljs-attribute\">-moz-appearance</span>: textfield;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h2 data-source=\"1305\"><a id=\"__1304\"></a>🌝 全部测试</h2>\n<p data-source=\"1306\"><img src=\"https://img-blog.csdnimg.cn/203d9af748a247c0a3263da284cb74ee.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/c062d8c267f640f6921fe057776066e4.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/2a494d8babd54672a488b55f38e6fbb4.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/71cd003ebc7444ce8472779a70f5cac5.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/4d7a3f8926664cc6a2a49e903aa1e0b4.png\" alt=\"在这里插入图片描述\"></p>\n<h2 data-source=\"1311\"><a id=\"__1310\"></a>🌹 结束语</h2>\n<p data-source=\"1312\">好了，整篇的教程呢到这也就结束，SpringBoot+Vue实现简单用户管理平台两篇文章也已经完稿，整篇教程即为原创一字一字手敲，也花了心思想怎么写怎么设计才能更好的直观简洁展示给大家，让大家能看懂</p>\n<p data-source=\"1314\">最后，关于教程还有什么不懂的可以评论区留言，我一定会回复的，或者有什么更好的建议和想法也可以在评论区留言，看到好的我会一一采纳，感谢大家的支持</p>\n<p data-source=\"1316\">再一次附上Gitee开源地址：<a href=\"https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master\" target=\"_blank\">https://gitee.com/yuandewei/Yuan-SpringBoot/tree/master</a> 不用大伙翻上去复制了</p>\n<blockquote data-source=\"1319\"><ul data-source=\"1318\"><li><p data-source=\"1318\"><strong>都看到这里啦，点点赞呀 😋</strong></li>\n<li><p data-source=\"1319\"><strong>感谢阅读 😘</strong></li>\n</ul>\n</blockquote>\n');

-- ----------------------------
-- Table structure for xy_article_like
-- ----------------------------
DROP TABLE IF EXISTS `xy_article_like`;
CREATE TABLE `xy_article_like`  (
  `id` bigint(0) NOT NULL COMMENT '编号',
  `user_id` bigint(0) NULL DEFAULT NULL COMMENT '点赞的用户',
  `article_id` bigint(0) NULL DEFAULT NULL COMMENT '点赞的文章',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '点赞时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_article_like
-- ----------------------------
INSERT INTO `xy_article_like` VALUES (1526838372368183297, 1526785502436454402, 1515281126715850753, '2022-05-18 16:13:30');
INSERT INTO `xy_article_like` VALUES (1526840455200829442, 1526785944126025730, 1526500138804162562, '2022-05-18 16:21:47');
INSERT INTO `xy_article_like` VALUES (1534147616095940610, 1531261963024805889, 1526500138804162562, '2022-06-07 20:17:49');

-- ----------------------------
-- Table structure for xy_category
-- ----------------------------
DROP TABLE IF EXISTS `xy_category`;
CREATE TABLE `xy_category`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '分类栏目ID',
  `name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分类栏目名称',
  `parent_id` int(0) NOT NULL COMMENT '父级分类的ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_category
-- ----------------------------
INSERT INTO `xy_category` VALUES (1, 'Java', 0);
INSERT INTO `xy_category` VALUES (2, 'Java基础', 1);
INSERT INTO `xy_category` VALUES (3, 'Spring', 1);
INSERT INTO `xy_category` VALUES (4, '项目实战教学', 0);
INSERT INTO `xy_category` VALUES (5, 'SpringBoot+Vue', 4);
INSERT INTO `xy_category` VALUES (6, 'SpringBoot+Thymeleaf', 4);
INSERT INTO `xy_category` VALUES (25, '笔记', 0);
INSERT INTO `xy_category` VALUES (26, 'Vue', 25);
INSERT INTO `xy_category` VALUES (27, 'Docker', 25);

-- ----------------------------
-- Table structure for xy_common_user
-- ----------------------------
DROP TABLE IF EXISTS `xy_common_user`;
CREATE TABLE `xy_common_user`  (
  `id` bigint(0) NOT NULL COMMENT '普通用户ID',
  `username` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '加密后的密码',
  `nickname` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `email` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `mobile_number` char(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号码',
  `wechat_number` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '微信号',
  `avatar` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户头像',
  `salt` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '加密盐',
  `gmt_create` datetime(0) NOT NULL COMMENT '注册时间',
  `gmt_login` datetime(0) NULL DEFAULT NULL COMMENT '登陆时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_common_user
-- ----------------------------
INSERT INTO `xy_common_user` VALUES (1515623159565447170, 'xwdwfgwfwa', '6570924c2edbd426c5689640b8784c80', '小袁同学', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/xiaoyuan-avatar.jpg', 'kTXyY#!$', '2022-05-17 17:21:58', NULL);
INSERT INTO `xy_common_user` VALUES (1526526039847718913, 'xiaoyuan', '97a993d1983d6642c8a006caa47bb0eb', '未设置昵称', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'mnbTj#!$', '2022-05-17 19:32:24', '2022-05-18 22:58:02');
INSERT INTO `xy_common_user` VALUES (1526785502436454402, 'pch123', 'becb30cef436f125f98964e51d4bc6a9', 'pch123', '1349665278@qq.com', NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'XKTIn#!$', '2022-05-18 12:43:25', '2022-05-18 16:14:18');
INSERT INTO `xy_common_user` VALUES (1526785944126025730, 'ty1040174549', '2ae98e478246f0caed681d119641a346', '未设置昵称', '1040174549@qq.com', NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'tcPcy#!$', '2022-05-18 12:45:10', '2022-05-18 16:24:14');
INSERT INTO `xy_common_user` VALUES (1526935057047564290, '123456l', '843b0e69d23df37f32d717ee310f256e', '未设置昵称', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'doCzS#!$', '2022-05-18 22:37:41', '2022-05-18 22:41:36');
INSERT INTO `xy_common_user` VALUES (1526937321904615425, 'xiaohao', 'd6ecfdf30075589aeda370825d14ec9b', 'xiaohao', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'jkXUu#!$', '2022-05-18 22:46:41', NULL);
INSERT INTO `xy_common_user` VALUES (1531261963024805889, 'xxxxx', '68e00983ddb5a1cee8955a4d28909e63', '未设置昵称', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'RHJoP#!$', '2022-05-30 21:11:16', '2022-06-07 09:13:23');
INSERT INTO `xy_common_user` VALUES (1533392228018264321, 'aaaaaa', '21f6e2c6b4f307fe0994cdd1bf5f4358', '未设置昵称', NULL, NULL, NULL, 'https://user.xiaoyuan-boke.com/user/avatar/user_default.png', 'OgdT#!$@', '2022-06-05 18:16:11', '2022-06-05 18:18:37');

-- ----------------------------
-- Table structure for xy_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `xy_friend_link`;
CREATE TABLE `xy_friend_link`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `nickname` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `field` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '领域',
  `describe` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简单描述',
  `link` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '友情链接',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_friend_link
-- ----------------------------
INSERT INTO `xy_friend_link` VALUES (1, '小袁同学', 'Java', '最快的脚步不是跨越，而是继续；最慢的步伐不是小步，而是徘徊。', 'https://www.xiaoyuan-boke.com', '2022-04-30 05:26:13');
INSERT INTO `xy_friend_link` VALUES (14, '答案', 'Java', '时间白驹过隙，转瞬即逝。可这种心情很长，如高山大川，连绵不绝。', 'https://www.aquestian.cn/', '2022-05-19 09:44:44');

-- ----------------------------
-- Table structure for xy_front_log
-- ----------------------------
DROP TABLE IF EXISTS `xy_front_log`;
CREATE TABLE `xy_front_log`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `ip` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'IP',
  `url` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '请求地址',
  `httpMethod` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '请求方法',
  `classMethod` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类方法',
  `timeCost` int(0) NULL DEFAULT NULL COMMENT '接口耗时',
  `os` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `userAgent` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '浏览器标识',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 589 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_front_log
-- ----------------------------
INSERT INTO `xy_front_log` VALUES (587, '43.138.223.178', 'http://43.138.223.178:9005/user/info', 'POST', 'com.xiaoyuan.front.controller.CommonUserController.getUserInfo', 4360, 'WINDOWS_10', 'CHROME10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36', '2022-06-06 08:58:13');
INSERT INTO `xy_front_log` VALUES (588, '43.138.223.178', 'http://43.138.223.178:9005/homeMessage/list', 'POST', 'com.xiaoyuan.front.controller.HomeMessageController.findHomeMessageList', 1225, 'WINDOWS_10', 'CHROME10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36', '2022-06-06 09:15:50');

-- ----------------------------
-- Table structure for xy_home_message
-- ----------------------------
DROP TABLE IF EXISTS `xy_home_message`;
CREATE TABLE `xy_home_message`  (
  `id` bigint(0) NOT NULL COMMENT '主页留言编号',
  `author_id` bigint(0) NULL DEFAULT NULL COMMENT '留言人',
  `content` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简单描述（正面）',
  `detail_content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '详细内容（背面）',
  `background` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '背景图（随机生成）',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '留言时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_home_message
-- ----------------------------
INSERT INTO `xy_home_message` VALUES (1526837983908524033, 1526785502436454402, '111', '', 'https://article.xiaoyuan-boke.com/background/m_bg1.jpg', '2022-05-18 16:11:57');
INSERT INTO `xy_home_message` VALUES (1526937266137149442, 1526935057047564290, '赞', '', 'https://article.xiaoyuan-boke.com/background/m_bg3.jpg', '2022-05-18 22:46:28');
INSERT INTO `xy_home_message` VALUES (1526939914219368449, 1526937321904615425, '我觉得这里的教程特别保姆级，太照顾我这种小白了', '非常感谢博主的编程教学，希望博主多多更新，会持续关注学习的~', 'https://article.xiaoyuan-boke.com/background/m_bg8.jpg', '2022-05-18 22:56:59');

-- ----------------------------
-- Table structure for xy_problem_feedback
-- ----------------------------
DROP TABLE IF EXISTS `xy_problem_feedback`;
CREATE TABLE `xy_problem_feedback`  (
  `id` bigint(0) NOT NULL,
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `problem` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '问题',
  `problem_state` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '问题状态（0-未解决，1-处理中，2-已解决）',
  `notice_state` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '通知状态（0-未通知，1-已通知）',
  `gmt_create` date NOT NULL COMMENT '反馈时间',
  `gmt_update` date NULL DEFAULT NULL COMMENT '处理时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_problem_feedback
-- ----------------------------
INSERT INTO `xy_problem_feedback` VALUES (1526837702810464257, '1349665278@qq.com', '无法验证手机号', '2', '1', '2022-05-18', '2022-05-18');
INSERT INTO `xy_problem_feedback` VALUES (1526839865053868033, '1040174549@qq.com', '很好很好', '2', '1', '2022-05-18', '2022-05-18');
INSERT INTO `xy_problem_feedback` VALUES (1526936622621863937, '1309319794@qq.com', '11', '2', '0', '2022-05-18', '2022-05-18');

-- ----------------------------
-- Table structure for xy_suggest_feedback
-- ----------------------------
DROP TABLE IF EXISTS `xy_suggest_feedback`;
CREATE TABLE `xy_suggest_feedback`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '建议反馈人',
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '建议反馈内容',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '反馈时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for xy_time_line
-- ----------------------------
DROP TABLE IF EXISTS `xy_time_line`;
CREATE TABLE `xy_time_line`  (
  `id` bigint(0) NOT NULL COMMENT '编号',
  `title` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `describe` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '正文',
  `start_time` date NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` date NULL DEFAULT NULL COMMENT '结束时间',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_time_line
-- ----------------------------
INSERT INTO `xy_time_line` VALUES (1526514721572880385, '博客搭建（1）—— 后台管理的文章发布功能', '个人博客搭建的第一个功能设计实现，实现了文章发布功能，引入markdown插件来撰写文章', '首页呢就是发布文章页面的设计，也是在Gitee和Github的平台找了好久好久，终于找打了非常好用的一款markdown插件，再结合自己设计的页面，最终页面效果如下\n\n![https://article.xiaoyuan-boke.com/timeline/6c83ab59c9c947e897de44d4999cb052.png](https://article.xiaoyuan-boke.com/timeline/6c83ab59c9c947e897de44d4999cb052.png)\n\n![https://article.xiaoyuan-boke.com/timeline/dc0faaea90de445e90e8175c67d55d02.png](https://article.xiaoyuan-boke.com/timeline/dc0faaea90de445e90e8175c67d55d02.png)\n\n页面是设计好了，但是实现功能方面又头疼了，也是由于自己刚开始做自己的项目，很多地方还是不太熟练，也是通过百度看视频看文章各种学习\n\n开发过程中也是出现了各种各样的bug，比如请求异常、表情异常等等，有的bug很快找出来了，有的找了一两个小时，整个人奔溃，终于也是把功能完整的实现了，克服了种种困难\n\n![https://article.xiaoyuan-boke.com/timeline/88242d2e2b234d44ba316ace55b8f772.png](https://article.xiaoyuan-boke.com/timeline/88242d2e2b234d44ba316ace55b8f772.png)\n\n文章发布的参数里面，这个分类专栏也是弄了很久，包括后端的分类专栏设计，数据库设计，前后端数据交互格式等等，也是一系列的问题，最终呢也是功夫不负有心人，发布功能完成了\n\n![https://article.xiaoyuan-boke.com/timeline/efb177416df24074bec8cbf0e3160288.png~articleImg](https://article.xiaoyuan-boke.com/timeline/efb177416df24074bec8cbf0e3160288.png~articleImg)', '2022-04-01', '2022-04-05', '2022-05-17 18:47:26');
INSERT INTO `xy_time_line` VALUES (1526517687902109698, '博客搭建（2）—— 后台的文章列表实现', '实现文章的分页列表显示，文章编辑和文章删除功能，查询功能还没来得及做，初版（后续完善）', '也是一开始先设计页面，使用的是element ui的组件库，但是一开始也是不太熟练，也是慢慢摸索了挺久，才懂的如何快速方便使用element ui组件库，最后也是大概的将文章列表页面设计了出来（初版）\n\n![https://article.xiaoyuan-boke.com/timeline/dbfd6c0481024a25ad5292215f672cfd.png~articleImg](https://article.xiaoyuan-boke.com/timeline/dbfd6c0481024a25ad5292215f672cfd.png~articleImg)\n\n功能方面，首先是查看功能，也是做得相对简陋，能看到文章基础信息就可以了，页面设计也是通过element ui同时集合自己的css设计出来的\n\n![https://article.xiaoyuan-boke.com/timeline/6b87bcc899094631aedbfa8476eed586.png~articleImg](https://article.xiaoyuan-boke.com/timeline/6b87bcc899094631aedbfa8476eed586.png~articleImg)\n\n删除文章是比较简单的，没有过多的校验，弹框确认即可删除，这部分挺快就做好了\n\n![https://article.xiaoyuan-boke.com/timeline/6c84832dfc3645f298b946df2b93573c.png~articleImg](https://article.xiaoyuan-boke.com/timeline/6c84832dfc3645f298b946df2b93573c.png~articleImg)\n\n难点还是编辑文章这块，首先呢，要跳到发布文章的页面，因为和发布功能用的是同一个页面，所以容易混淆，加了各种的判断，成功校验状态\n\n但是问题又来了，数据呢？这么多的数据，一开始的设计方法是通过路由绑定ID，然后是编辑时就向后端获取文章信息\n\n但是我想不通过发请求的方式，直接传递整个对象过去，二话不说马上设计，结果遇到了各种各种的问题，各种百度、CSDN解决问题，一开始使用**localSession**来传递数据，但是一刷新页面数据就丢失了，没办法，换\n\n又尝试了页面通信，又告破失败，没办法，换，最终使用 **sessionStorage** 成功了\n\n跳转前存储到 **sessionStorage** 里面，页面关闭时销毁对象，完美解决', '2022-04-06', '2022-04-07', '2022-05-17 18:59:13');
INSERT INTO `xy_time_line` VALUES (1526521962334093314, '更多时间线还在撰写中', '一开始忘记做一步写一步时间线了，现在只能上线了再开始写时间线', '无', '2022-04-07', '2022-04-07', '2022-05-17 19:16:12');

-- ----------------------------
-- Table structure for xy_user_operation
-- ----------------------------
DROP TABLE IF EXISTS `xy_user_operation`;
CREATE TABLE `xy_user_operation`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(0) NOT NULL COMMENT '用户编号',
  `describe` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户描述',
  `gmt_create` datetime(0) NULL DEFAULT NULL COMMENT '操作时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 64 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of xy_user_operation
-- ----------------------------
INSERT INTO `xy_user_operation` VALUES (7, 1526526039847718913, '用户登录', '2022-05-17 19:32:24');
INSERT INTO `xy_user_operation` VALUES (8, 1526785502436454402, '用户登录', '2022-05-18 12:43:25');
INSERT INTO `xy_user_operation` VALUES (9, 1526785502436454402, '用户登录', '2022-05-18 12:43:33');
INSERT INTO `xy_user_operation` VALUES (10, 1526785502436454402, '用户登录', '2022-05-18 12:43:50');
INSERT INTO `xy_user_operation` VALUES (11, 1526785502436454402, '用户登录', '2022-05-18 12:44:01');
INSERT INTO `xy_user_operation` VALUES (12, 1526526039847718913, '用户登录', '2022-05-18 12:44:11');
INSERT INTO `xy_user_operation` VALUES (13, 1526785944126025730, '用户登录', '2022-05-18 12:45:10');
INSERT INTO `xy_user_operation` VALUES (14, 1526785944126025730, '用户登录', '2022-05-18 12:46:05');
INSERT INTO `xy_user_operation` VALUES (15, 1526785944126025730, '用户登录', '2022-05-18 12:46:25');
INSERT INTO `xy_user_operation` VALUES (16, 1526526039847718913, '用户登录', '2022-05-18 13:10:15');
INSERT INTO `xy_user_operation` VALUES (17, 1526526039847718913, '用户登录', '2022-05-18 13:13:45');
INSERT INTO `xy_user_operation` VALUES (18, 1526526039847718913, '用户登录', '2022-05-18 14:20:20');
INSERT INTO `xy_user_operation` VALUES (19, 1526526039847718913, '用户登录', '2022-05-18 14:22:07');
INSERT INTO `xy_user_operation` VALUES (20, 1526526039847718913, '用户登录', '2022-05-18 14:48:14');
INSERT INTO `xy_user_operation` VALUES (21, 1526526039847718913, '用户登录', '2022-05-18 14:52:32');
INSERT INTO `xy_user_operation` VALUES (22, 1526526039847718913, '用户登录', '2022-05-18 14:53:01');
INSERT INTO `xy_user_operation` VALUES (23, 1526526039847718913, '退出登录', '2022-05-18 14:58:37');
INSERT INTO `xy_user_operation` VALUES (24, 1526526039847718913, '用户登录', '2022-05-18 15:03:38');
INSERT INTO `xy_user_operation` VALUES (25, 1526526039847718913, '用户登录', '2022-05-18 15:36:43');
INSERT INTO `xy_user_operation` VALUES (26, 1526526039847718913, '退出登录', '2022-05-18 15:37:16');
INSERT INTO `xy_user_operation` VALUES (27, 1526526039847718913, '用户登录', '2022-05-18 15:39:19');
INSERT INTO `xy_user_operation` VALUES (28, 1526526039847718913, '用户登录', '2022-05-18 15:54:23');
INSERT INTO `xy_user_operation` VALUES (29, 1526526039847718913, '用户登录', '2022-05-18 16:04:28');
INSERT INTO `xy_user_operation` VALUES (30, 1526526039847718913, '退出登录', '2022-05-18 16:04:34');
INSERT INTO `xy_user_operation` VALUES (31, 1526785502436454402, '用户登录', '2022-05-18 16:07:53');
INSERT INTO `xy_user_operation` VALUES (32, 1526785944126025730, '用户登录', '2022-05-18 16:08:11');
INSERT INTO `xy_user_operation` VALUES (33, 1526785502436454402, '修改昵称或者用户名', '2022-05-18 16:09:41');
INSERT INTO `xy_user_operation` VALUES (34, 1526785502436454402, '修改邮箱', '2022-05-18 16:10:11');
INSERT INTO `xy_user_operation` VALUES (35, 1526785502436454402, '退出登录', '2022-05-18 16:13:44');
INSERT INTO `xy_user_operation` VALUES (36, 1526785502436454402, '用户登录', '2022-05-18 16:14:18');
INSERT INTO `xy_user_operation` VALUES (37, 1526785944126025730, '修改邮箱', '2022-05-18 16:19:14');
INSERT INTO `xy_user_operation` VALUES (38, 1526785944126025730, '退出登录', '2022-05-18 16:21:59');
INSERT INTO `xy_user_operation` VALUES (39, 1526785944126025730, '用户登录', '2022-05-18 16:22:31');
INSERT INTO `xy_user_operation` VALUES (40, 1526785944126025730, '退出登录', '2022-05-18 16:22:57');
INSERT INTO `xy_user_operation` VALUES (41, 1526785944126025730, '用户登录', '2022-05-18 16:24:14');
INSERT INTO `xy_user_operation` VALUES (42, 1526526039847718913, '用户登录', '2022-05-18 22:23:03');
INSERT INTO `xy_user_operation` VALUES (43, 1526526039847718913, '用户登录', '2022-05-18 22:28:13');
INSERT INTO `xy_user_operation` VALUES (44, 1526935057047564290, '用户登录', '2022-05-18 22:37:41');
INSERT INTO `xy_user_operation` VALUES (45, 1526935057047564290, '用户登录', '2022-05-18 22:41:36');
INSERT INTO `xy_user_operation` VALUES (46, 1526937321904615425, '用户登录', '2022-05-18 22:46:41');
INSERT INTO `xy_user_operation` VALUES (47, 1526937321904615425, '修改昵称或者用户名', '2022-05-18 22:47:06');
INSERT INTO `xy_user_operation` VALUES (48, 1526526039847718913, '退出登录', '2022-05-18 22:53:57');
INSERT INTO `xy_user_operation` VALUES (49, 1526526039847718913, '用户登录', '2022-05-18 22:58:02');
INSERT INTO `xy_user_operation` VALUES (51, 1526526039847718913, '退出登录', '2022-05-18 23:43:26');
INSERT INTO `xy_user_operation` VALUES (54, 1531261963024805889, '用户登录', '2022-05-30 21:11:16');
INSERT INTO `xy_user_operation` VALUES (56, 1531261963024805889, '用户登录', '2022-06-05 17:52:50');
INSERT INTO `xy_user_operation` VALUES (57, 1531261963024805889, '用户登录', '2022-06-05 18:08:28');
INSERT INTO `xy_user_operation` VALUES (61, 1533392228018264321, '用户登录', '2022-06-05 18:18:37');
INSERT INTO `xy_user_operation` VALUES (62, 1531261963024805889, '用户登录', '2022-06-05 19:07:56');
INSERT INTO `xy_user_operation` VALUES (63, 1531261963024805889, '用户登录', '2022-06-05 22:54:43');
INSERT INTO `xy_user_operation` VALUES (64, 1531261963024805889, '用户登录', '2022-06-07 09:13:23');

SET FOREIGN_KEY_CHECKS = 1;
